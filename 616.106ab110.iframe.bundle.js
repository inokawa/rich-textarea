/*! For license information please see 616.106ab110.iframe.bundle.js.LICENSE.txt */
"use strict";(self.webpackChunkrich_textarea=self.webpackChunkrich_textarea||[]).push([[616],{"./node_modules/monaco-diff/lib/index.mjs":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{Z:()=>index});class DiffChange{constructor(originalStart,originalLength,modifiedStart,modifiedLength){this.originalStart=originalStart,this.originalLength=originalLength,this.modifiedStart=modifiedStart,this.modifiedLength=modifiedLength}getOriginalEnd(){return this.originalStart+this.originalLength}getModifiedEnd(){return this.modifiedStart+this.modifiedLength}}function numberHash(val,initialHashVal){return(initialHashVal<<5)-initialHashVal+val|0}function stringHash(s,hashVal){hashVal=numberHash(149417,hashVal);for(let i=0,length=s.length;i<length;i++)hashVal=numberHash(s.charCodeAt(i),hashVal);return hashVal}class Debug{static Assert(condition,message){if(!condition)throw new Error(message)}}class MyArray{static Copy(sourceArray,sourceIndex,destinationArray,destinationIndex,length){for(let i=0;i<length;i++)destinationArray[destinationIndex+i]=sourceArray[sourceIndex+i]}static Copy2(sourceArray,sourceIndex,destinationArray,destinationIndex,length){for(let i=0;i<length;i++)destinationArray[destinationIndex+i]=sourceArray[sourceIndex+i]}}class DiffChangeHelper{constructor(){this.m_changes=[],this.m_originalStart=1073741824,this.m_modifiedStart=1073741824,this.m_originalCount=0,this.m_modifiedCount=0}MarkNextChange(){(this.m_originalCount>0||this.m_modifiedCount>0)&&this.m_changes.push(new DiffChange(this.m_originalStart,this.m_originalCount,this.m_modifiedStart,this.m_modifiedCount)),this.m_originalCount=0,this.m_modifiedCount=0,this.m_originalStart=1073741824,this.m_modifiedStart=1073741824}AddOriginalElement(originalIndex,modifiedIndex){this.m_originalStart=Math.min(this.m_originalStart,originalIndex),this.m_modifiedStart=Math.min(this.m_modifiedStart,modifiedIndex),this.m_originalCount++}AddModifiedElement(originalIndex,modifiedIndex){this.m_originalStart=Math.min(this.m_originalStart,originalIndex),this.m_modifiedStart=Math.min(this.m_modifiedStart,modifiedIndex),this.m_modifiedCount++}getChanges(){return(this.m_originalCount>0||this.m_modifiedCount>0)&&this.MarkNextChange(),this.m_changes}getReverseChanges(){return(this.m_originalCount>0||this.m_modifiedCount>0)&&this.MarkNextChange(),this.m_changes.reverse(),this.m_changes}}class LcsDiff{constructor(originalSequence,modifiedSequence,continueProcessingPredicate=null){this.ContinueProcessingPredicate=continueProcessingPredicate,this._originalSequence=originalSequence,this._modifiedSequence=modifiedSequence;const[originalStringElements,originalElementsOrHash,originalHasStrings]=LcsDiff._getElements(originalSequence),[modifiedStringElements,modifiedElementsOrHash,modifiedHasStrings]=LcsDiff._getElements(modifiedSequence);this._hasStrings=originalHasStrings&&modifiedHasStrings,this._originalStringElements=originalStringElements,this._originalElementsOrHash=originalElementsOrHash,this._modifiedStringElements=modifiedStringElements,this._modifiedElementsOrHash=modifiedElementsOrHash,this.m_forwardHistory=[],this.m_reverseHistory=[]}static _isStringArray(arr){return arr.length>0&&"string"==typeof arr[0]}static _getElements(sequence){const elements=sequence.getElements();if(LcsDiff._isStringArray(elements)){const hashes=new Int32Array(elements.length);for(let i=0,len=elements.length;i<len;i++)hashes[i]=stringHash(elements[i],0);return[elements,hashes,!0]}return elements instanceof Int32Array?[[],elements,!1]:[[],new Int32Array(elements),!1]}ElementsAreEqual(originalIndex,newIndex){return this._originalElementsOrHash[originalIndex]===this._modifiedElementsOrHash[newIndex]&&(!this._hasStrings||this._originalStringElements[originalIndex]===this._modifiedStringElements[newIndex])}ElementsAreStrictEqual(originalIndex,newIndex){if(!this.ElementsAreEqual(originalIndex,newIndex))return!1;return LcsDiff._getStrictElement(this._originalSequence,originalIndex)===LcsDiff._getStrictElement(this._modifiedSequence,newIndex)}static _getStrictElement(sequence,index2){return"function"==typeof sequence.getStrictElement?sequence.getStrictElement(index2):null}OriginalElementsAreEqual(index1,index2){return this._originalElementsOrHash[index1]===this._originalElementsOrHash[index2]&&(!this._hasStrings||this._originalStringElements[index1]===this._originalStringElements[index2])}ModifiedElementsAreEqual(index1,index2){return this._modifiedElementsOrHash[index1]===this._modifiedElementsOrHash[index2]&&(!this._hasStrings||this._modifiedStringElements[index1]===this._modifiedStringElements[index2])}ComputeDiff(pretty){return this._ComputeDiff(0,this._originalElementsOrHash.length-1,0,this._modifiedElementsOrHash.length-1,pretty)}_ComputeDiff(originalStart,originalEnd,modifiedStart,modifiedEnd,pretty){const quitEarlyArr=[!1];let changes=this.ComputeDiffRecursive(originalStart,originalEnd,modifiedStart,modifiedEnd,quitEarlyArr);return pretty&&(changes=this.PrettifyChanges(changes)),{quitEarly:quitEarlyArr[0],changes}}ComputeDiffRecursive(originalStart,originalEnd,modifiedStart,modifiedEnd,quitEarlyArr){for(quitEarlyArr[0]=!1;originalStart<=originalEnd&&modifiedStart<=modifiedEnd&&this.ElementsAreEqual(originalStart,modifiedStart);)originalStart++,modifiedStart++;for(;originalEnd>=originalStart&&modifiedEnd>=modifiedStart&&this.ElementsAreEqual(originalEnd,modifiedEnd);)originalEnd--,modifiedEnd--;if(originalStart>originalEnd||modifiedStart>modifiedEnd){let changes;return modifiedStart<=modifiedEnd?(Debug.Assert(originalStart===originalEnd+1,"originalStart should only be one more than originalEnd"),changes=[new DiffChange(originalStart,0,modifiedStart,modifiedEnd-modifiedStart+1)]):originalStart<=originalEnd?(Debug.Assert(modifiedStart===modifiedEnd+1,"modifiedStart should only be one more than modifiedEnd"),changes=[new DiffChange(originalStart,originalEnd-originalStart+1,modifiedStart,0)]):(Debug.Assert(originalStart===originalEnd+1,"originalStart should only be one more than originalEnd"),Debug.Assert(modifiedStart===modifiedEnd+1,"modifiedStart should only be one more than modifiedEnd"),changes=[]),changes}const midOriginalArr=[0],midModifiedArr=[0],result=this.ComputeRecursionPoint(originalStart,originalEnd,modifiedStart,modifiedEnd,midOriginalArr,midModifiedArr,quitEarlyArr),midOriginal=midOriginalArr[0],midModified=midModifiedArr[0];if(null!==result)return result;if(!quitEarlyArr[0]){const leftChanges=this.ComputeDiffRecursive(originalStart,midOriginal,modifiedStart,midModified,quitEarlyArr);let rightChanges=[];return rightChanges=quitEarlyArr[0]?[new DiffChange(midOriginal+1,originalEnd-(midOriginal+1)+1,midModified+1,modifiedEnd-(midModified+1)+1)]:this.ComputeDiffRecursive(midOriginal+1,originalEnd,midModified+1,modifiedEnd,quitEarlyArr),this.ConcatenateChanges(leftChanges,rightChanges)}return[new DiffChange(originalStart,originalEnd-originalStart+1,modifiedStart,modifiedEnd-modifiedStart+1)]}WALKTRACE(diagonalForwardBase,diagonalForwardStart,diagonalForwardEnd,diagonalForwardOffset,diagonalReverseBase,diagonalReverseStart,diagonalReverseEnd,diagonalReverseOffset,forwardPoints,reversePoints,originalIndex,originalEnd,midOriginalArr,modifiedIndex,modifiedEnd,midModifiedArr,deltaIsEven,quitEarlyArr){let forwardChanges=null,reverseChanges=null,changeHelper=new DiffChangeHelper,diagonalMin=diagonalForwardStart,diagonalMax=diagonalForwardEnd,diagonalRelative=midOriginalArr[0]-midModifiedArr[0]-diagonalForwardOffset,lastOriginalIndex=-1073741824,historyIndex=this.m_forwardHistory.length-1;do{const diagonal=diagonalRelative+diagonalForwardBase;diagonal===diagonalMin||diagonal<diagonalMax&&forwardPoints[diagonal-1]<forwardPoints[diagonal+1]?(modifiedIndex=(originalIndex=forwardPoints[diagonal+1])-diagonalRelative-diagonalForwardOffset,originalIndex<lastOriginalIndex&&changeHelper.MarkNextChange(),lastOriginalIndex=originalIndex,changeHelper.AddModifiedElement(originalIndex+1,modifiedIndex),diagonalRelative=diagonal+1-diagonalForwardBase):(modifiedIndex=(originalIndex=forwardPoints[diagonal-1]+1)-diagonalRelative-diagonalForwardOffset,originalIndex<lastOriginalIndex&&changeHelper.MarkNextChange(),lastOriginalIndex=originalIndex-1,changeHelper.AddOriginalElement(originalIndex,modifiedIndex+1),diagonalRelative=diagonal-1-diagonalForwardBase),historyIndex>=0&&(diagonalForwardBase=(forwardPoints=this.m_forwardHistory[historyIndex])[0],diagonalMin=1,diagonalMax=forwardPoints.length-1)}while(--historyIndex>=-1);if(forwardChanges=changeHelper.getReverseChanges(),quitEarlyArr[0]){let originalStartPoint=midOriginalArr[0]+1,modifiedStartPoint=midModifiedArr[0]+1;if(null!==forwardChanges&&forwardChanges.length>0){const lastForwardChange=forwardChanges[forwardChanges.length-1];originalStartPoint=Math.max(originalStartPoint,lastForwardChange.getOriginalEnd()),modifiedStartPoint=Math.max(modifiedStartPoint,lastForwardChange.getModifiedEnd())}reverseChanges=[new DiffChange(originalStartPoint,originalEnd-originalStartPoint+1,modifiedStartPoint,modifiedEnd-modifiedStartPoint+1)]}else{changeHelper=new DiffChangeHelper,diagonalMin=diagonalReverseStart,diagonalMax=diagonalReverseEnd,diagonalRelative=midOriginalArr[0]-midModifiedArr[0]-diagonalReverseOffset,lastOriginalIndex=1073741824,historyIndex=deltaIsEven?this.m_reverseHistory.length-1:this.m_reverseHistory.length-2;do{const diagonal=diagonalRelative+diagonalReverseBase;diagonal===diagonalMin||diagonal<diagonalMax&&reversePoints[diagonal-1]>=reversePoints[diagonal+1]?(modifiedIndex=(originalIndex=reversePoints[diagonal+1]-1)-diagonalRelative-diagonalReverseOffset,originalIndex>lastOriginalIndex&&changeHelper.MarkNextChange(),lastOriginalIndex=originalIndex+1,changeHelper.AddOriginalElement(originalIndex+1,modifiedIndex+1),diagonalRelative=diagonal+1-diagonalReverseBase):(modifiedIndex=(originalIndex=reversePoints[diagonal-1])-diagonalRelative-diagonalReverseOffset,originalIndex>lastOriginalIndex&&changeHelper.MarkNextChange(),lastOriginalIndex=originalIndex,changeHelper.AddModifiedElement(originalIndex+1,modifiedIndex+1),diagonalRelative=diagonal-1-diagonalReverseBase),historyIndex>=0&&(diagonalReverseBase=(reversePoints=this.m_reverseHistory[historyIndex])[0],diagonalMin=1,diagonalMax=reversePoints.length-1)}while(--historyIndex>=-1);reverseChanges=changeHelper.getChanges()}return this.ConcatenateChanges(forwardChanges,reverseChanges)}ComputeRecursionPoint(originalStart,originalEnd,modifiedStart,modifiedEnd,midOriginalArr,midModifiedArr,quitEarlyArr){let originalIndex=0,modifiedIndex=0,diagonalForwardStart=0,diagonalForwardEnd=0,diagonalReverseStart=0,diagonalReverseEnd=0;originalStart--,modifiedStart--,midOriginalArr[0]=0,midModifiedArr[0]=0,this.m_forwardHistory=[],this.m_reverseHistory=[];const maxDifferences=originalEnd-originalStart+(modifiedEnd-modifiedStart),numDiagonals=maxDifferences+1,forwardPoints=new Int32Array(numDiagonals),reversePoints=new Int32Array(numDiagonals),diagonalForwardBase=modifiedEnd-modifiedStart,diagonalReverseBase=originalEnd-originalStart,diagonalForwardOffset=originalStart-modifiedStart,diagonalReverseOffset=originalEnd-modifiedEnd,deltaIsEven=(diagonalReverseBase-diagonalForwardBase)%2==0;forwardPoints[diagonalForwardBase]=originalStart,reversePoints[diagonalReverseBase]=originalEnd,quitEarlyArr[0]=!1;for(let numDifferences=1;numDifferences<=maxDifferences/2+1;numDifferences++){let furthestOriginalIndex=0,furthestModifiedIndex=0;diagonalForwardStart=this.ClipDiagonalBound(diagonalForwardBase-numDifferences,numDifferences,diagonalForwardBase,numDiagonals),diagonalForwardEnd=this.ClipDiagonalBound(diagonalForwardBase+numDifferences,numDifferences,diagonalForwardBase,numDiagonals);for(let diagonal=diagonalForwardStart;diagonal<=diagonalForwardEnd;diagonal+=2){originalIndex=diagonal===diagonalForwardStart||diagonal<diagonalForwardEnd&&forwardPoints[diagonal-1]<forwardPoints[diagonal+1]?forwardPoints[diagonal+1]:forwardPoints[diagonal-1]+1,modifiedIndex=originalIndex-(diagonal-diagonalForwardBase)-diagonalForwardOffset;const tempOriginalIndex=originalIndex;for(;originalIndex<originalEnd&&modifiedIndex<modifiedEnd&&this.ElementsAreEqual(originalIndex+1,modifiedIndex+1);)originalIndex++,modifiedIndex++;if(forwardPoints[diagonal]=originalIndex,originalIndex+modifiedIndex>furthestOriginalIndex+furthestModifiedIndex&&(furthestOriginalIndex=originalIndex,furthestModifiedIndex=modifiedIndex),!deltaIsEven&&Math.abs(diagonal-diagonalReverseBase)<=numDifferences-1&&originalIndex>=reversePoints[diagonal])return midOriginalArr[0]=originalIndex,midModifiedArr[0]=modifiedIndex,tempOriginalIndex<=reversePoints[diagonal]&&numDifferences<=1448?this.WALKTRACE(diagonalForwardBase,diagonalForwardStart,diagonalForwardEnd,diagonalForwardOffset,diagonalReverseBase,diagonalReverseStart,diagonalReverseEnd,diagonalReverseOffset,forwardPoints,reversePoints,originalIndex,originalEnd,midOriginalArr,modifiedIndex,modifiedEnd,midModifiedArr,deltaIsEven,quitEarlyArr):null}const matchLengthOfLongest=(furthestOriginalIndex-originalStart+(furthestModifiedIndex-modifiedStart)-numDifferences)/2;if(null!==this.ContinueProcessingPredicate&&!this.ContinueProcessingPredicate(furthestOriginalIndex,matchLengthOfLongest))return quitEarlyArr[0]=!0,midOriginalArr[0]=furthestOriginalIndex,midModifiedArr[0]=furthestModifiedIndex,matchLengthOfLongest>0&&numDifferences<=1448?this.WALKTRACE(diagonalForwardBase,diagonalForwardStart,diagonalForwardEnd,diagonalForwardOffset,diagonalReverseBase,diagonalReverseStart,diagonalReverseEnd,diagonalReverseOffset,forwardPoints,reversePoints,originalIndex,originalEnd,midOriginalArr,modifiedIndex,modifiedEnd,midModifiedArr,deltaIsEven,quitEarlyArr):(originalStart++,modifiedStart++,[new DiffChange(originalStart,originalEnd-originalStart+1,modifiedStart,modifiedEnd-modifiedStart+1)]);diagonalReverseStart=this.ClipDiagonalBound(diagonalReverseBase-numDifferences,numDifferences,diagonalReverseBase,numDiagonals),diagonalReverseEnd=this.ClipDiagonalBound(diagonalReverseBase+numDifferences,numDifferences,diagonalReverseBase,numDiagonals);for(let diagonal=diagonalReverseStart;diagonal<=diagonalReverseEnd;diagonal+=2){originalIndex=diagonal===diagonalReverseStart||diagonal<diagonalReverseEnd&&reversePoints[diagonal-1]>=reversePoints[diagonal+1]?reversePoints[diagonal+1]-1:reversePoints[diagonal-1],modifiedIndex=originalIndex-(diagonal-diagonalReverseBase)-diagonalReverseOffset;const tempOriginalIndex=originalIndex;for(;originalIndex>originalStart&&modifiedIndex>modifiedStart&&this.ElementsAreEqual(originalIndex,modifiedIndex);)originalIndex--,modifiedIndex--;if(reversePoints[diagonal]=originalIndex,deltaIsEven&&Math.abs(diagonal-diagonalForwardBase)<=numDifferences&&originalIndex<=forwardPoints[diagonal])return midOriginalArr[0]=originalIndex,midModifiedArr[0]=modifiedIndex,tempOriginalIndex>=forwardPoints[diagonal]&&numDifferences<=1448?this.WALKTRACE(diagonalForwardBase,diagonalForwardStart,diagonalForwardEnd,diagonalForwardOffset,diagonalReverseBase,diagonalReverseStart,diagonalReverseEnd,diagonalReverseOffset,forwardPoints,reversePoints,originalIndex,originalEnd,midOriginalArr,modifiedIndex,modifiedEnd,midModifiedArr,deltaIsEven,quitEarlyArr):null}if(numDifferences<=1447){let temp=new Int32Array(diagonalForwardEnd-diagonalForwardStart+2);temp[0]=diagonalForwardBase-diagonalForwardStart+1,MyArray.Copy2(forwardPoints,diagonalForwardStart,temp,1,diagonalForwardEnd-diagonalForwardStart+1),this.m_forwardHistory.push(temp),temp=new Int32Array(diagonalReverseEnd-diagonalReverseStart+2),temp[0]=diagonalReverseBase-diagonalReverseStart+1,MyArray.Copy2(reversePoints,diagonalReverseStart,temp,1,diagonalReverseEnd-diagonalReverseStart+1),this.m_reverseHistory.push(temp)}}return this.WALKTRACE(diagonalForwardBase,diagonalForwardStart,diagonalForwardEnd,diagonalForwardOffset,diagonalReverseBase,diagonalReverseStart,diagonalReverseEnd,diagonalReverseOffset,forwardPoints,reversePoints,originalIndex,originalEnd,midOriginalArr,modifiedIndex,modifiedEnd,midModifiedArr,deltaIsEven,quitEarlyArr)}PrettifyChanges(changes){for(let i=0;i<changes.length;i++){const change=changes[i],originalStop=i<changes.length-1?changes[i+1].originalStart:this._originalElementsOrHash.length,modifiedStop=i<changes.length-1?changes[i+1].modifiedStart:this._modifiedElementsOrHash.length,checkOriginal=change.originalLength>0,checkModified=change.modifiedLength>0;for(;change.originalStart+change.originalLength<originalStop&&change.modifiedStart+change.modifiedLength<modifiedStop&&(!checkOriginal||this.OriginalElementsAreEqual(change.originalStart,change.originalStart+change.originalLength))&&(!checkModified||this.ModifiedElementsAreEqual(change.modifiedStart,change.modifiedStart+change.modifiedLength));){const startStrictEqual=this.ElementsAreStrictEqual(change.originalStart,change.modifiedStart);if(this.ElementsAreStrictEqual(change.originalStart+change.originalLength,change.modifiedStart+change.modifiedLength)&&!startStrictEqual)break;change.originalStart++,change.modifiedStart++}let mergedChangeArr=[null];i<changes.length-1&&this.ChangesOverlap(changes[i],changes[i+1],mergedChangeArr)&&(changes[i]=mergedChangeArr[0],changes.splice(i+1,1),i--)}for(let i=changes.length-1;i>=0;i--){const change=changes[i];let originalStop=0,modifiedStop=0;if(i>0){const prevChange=changes[i-1];originalStop=prevChange.originalStart+prevChange.originalLength,modifiedStop=prevChange.modifiedStart+prevChange.modifiedLength}const checkOriginal=change.originalLength>0,checkModified=change.modifiedLength>0;let bestDelta=0,bestScore=this._boundaryScore(change.originalStart,change.originalLength,change.modifiedStart,change.modifiedLength);for(let delta=1;;delta++){const originalStart=change.originalStart-delta,modifiedStart=change.modifiedStart-delta;if(originalStart<originalStop||modifiedStart<modifiedStop)break;if(checkOriginal&&!this.OriginalElementsAreEqual(originalStart,originalStart+change.originalLength))break;if(checkModified&&!this.ModifiedElementsAreEqual(modifiedStart,modifiedStart+change.modifiedLength))break;const score=(originalStart===originalStop&&modifiedStart===modifiedStop?5:0)+this._boundaryScore(originalStart,change.originalLength,modifiedStart,change.modifiedLength);score>bestScore&&(bestScore=score,bestDelta=delta)}change.originalStart-=bestDelta,change.modifiedStart-=bestDelta;const mergedChangeArr=[null];i>0&&this.ChangesOverlap(changes[i-1],changes[i],mergedChangeArr)&&(changes[i-1]=mergedChangeArr[0],changes.splice(i,1),i++)}if(this._hasStrings)for(let i=1,len=changes.length;i<len;i++){const aChange=changes[i-1],bChange=changes[i],matchedLength=bChange.originalStart-aChange.originalStart-aChange.originalLength,aOriginalStart=aChange.originalStart,bOriginalEnd=bChange.originalStart+bChange.originalLength,abOriginalLength=bOriginalEnd-aOriginalStart,aModifiedStart=aChange.modifiedStart,bModifiedEnd=bChange.modifiedStart+bChange.modifiedLength,abModifiedLength=bModifiedEnd-aModifiedStart;if(matchedLength<5&&abOriginalLength<20&&abModifiedLength<20){const t=this._findBetterContiguousSequence(aOriginalStart,abOriginalLength,aModifiedStart,abModifiedLength,matchedLength);if(t){const[originalMatchStart,modifiedMatchStart]=t;originalMatchStart===aChange.originalStart+aChange.originalLength&&modifiedMatchStart===aChange.modifiedStart+aChange.modifiedLength||(aChange.originalLength=originalMatchStart-aChange.originalStart,aChange.modifiedLength=modifiedMatchStart-aChange.modifiedStart,bChange.originalStart=originalMatchStart+matchedLength,bChange.modifiedStart=modifiedMatchStart+matchedLength,bChange.originalLength=bOriginalEnd-bChange.originalStart,bChange.modifiedLength=bModifiedEnd-bChange.modifiedStart)}}}return changes}_findBetterContiguousSequence(originalStart,originalLength,modifiedStart,modifiedLength,desiredLength){if(originalLength<desiredLength||modifiedLength<desiredLength)return null;const originalMax=originalStart+originalLength-desiredLength+1,modifiedMax=modifiedStart+modifiedLength-desiredLength+1;let bestScore=0,bestOriginalStart=0,bestModifiedStart=0;for(let i=originalStart;i<originalMax;i++)for(let j=modifiedStart;j<modifiedMax;j++){const score=this._contiguousSequenceScore(i,j,desiredLength);score>0&&score>bestScore&&(bestScore=score,bestOriginalStart=i,bestModifiedStart=j)}return bestScore>0?[bestOriginalStart,bestModifiedStart]:null}_contiguousSequenceScore(originalStart,modifiedStart,length){let score=0;for(let l=0;l<length;l++){if(!this.ElementsAreEqual(originalStart+l,modifiedStart+l))return 0;score+=this._originalStringElements[originalStart+l].length}return score}_OriginalIsBoundary(index2){return index2<=0||index2>=this._originalElementsOrHash.length-1||this._hasStrings&&/^\s*$/.test(this._originalStringElements[index2])}_OriginalRegionIsBoundary(originalStart,originalLength){if(this._OriginalIsBoundary(originalStart)||this._OriginalIsBoundary(originalStart-1))return!0;if(originalLength>0){const originalEnd=originalStart+originalLength;if(this._OriginalIsBoundary(originalEnd-1)||this._OriginalIsBoundary(originalEnd))return!0}return!1}_ModifiedIsBoundary(index2){return index2<=0||index2>=this._modifiedElementsOrHash.length-1||this._hasStrings&&/^\s*$/.test(this._modifiedStringElements[index2])}_ModifiedRegionIsBoundary(modifiedStart,modifiedLength){if(this._ModifiedIsBoundary(modifiedStart)||this._ModifiedIsBoundary(modifiedStart-1))return!0;if(modifiedLength>0){const modifiedEnd=modifiedStart+modifiedLength;if(this._ModifiedIsBoundary(modifiedEnd-1)||this._ModifiedIsBoundary(modifiedEnd))return!0}return!1}_boundaryScore(originalStart,originalLength,modifiedStart,modifiedLength){return(this._OriginalRegionIsBoundary(originalStart,originalLength)?1:0)+(this._ModifiedRegionIsBoundary(modifiedStart,modifiedLength)?1:0)}ConcatenateChanges(left,right){let mergedChangeArr=[];if(0===left.length||0===right.length)return right.length>0?right:left;if(this.ChangesOverlap(left[left.length-1],right[0],mergedChangeArr)){const result=new Array(left.length+right.length-1);return MyArray.Copy(left,0,result,0,left.length-1),result[left.length-1]=mergedChangeArr[0],MyArray.Copy(right,1,result,left.length,right.length-1),result}{const result=new Array(left.length+right.length);return MyArray.Copy(left,0,result,0,left.length),MyArray.Copy(right,0,result,left.length,right.length),result}}ChangesOverlap(left,right,mergedChangeArr){if(Debug.Assert(left.originalStart<=right.originalStart,"Left change is not less than or equal to right change"),Debug.Assert(left.modifiedStart<=right.modifiedStart,"Left change is not less than or equal to right change"),left.originalStart+left.originalLength>=right.originalStart||left.modifiedStart+left.modifiedLength>=right.modifiedStart){const originalStart=left.originalStart;let originalLength=left.originalLength;const modifiedStart=left.modifiedStart;let modifiedLength=left.modifiedLength;return left.originalStart+left.originalLength>=right.originalStart&&(originalLength=right.originalStart+right.originalLength-left.originalStart),left.modifiedStart+left.modifiedLength>=right.modifiedStart&&(modifiedLength=right.modifiedStart+right.modifiedLength-left.modifiedStart),mergedChangeArr[0]=new DiffChange(originalStart,originalLength,modifiedStart,modifiedLength),!0}return mergedChangeArr[0]=null,!1}ClipDiagonalBound(diagonal,numDifferences,diagonalBaseIndex,numDiagonals){if(diagonal>=0&&diagonal<numDiagonals)return diagonal;const diffEven=numDifferences%2==0;if(diagonal<0){return diffEven===(diagonalBaseIndex%2==0)?0:1}return diffEven===((numDiagonals-diagonalBaseIndex-1)%2==0)?numDiagonals-1:numDiagonals-2}}const MINIMUM_MATCHING_CHARACTER_LENGTH=3;function computeDiff(originalSequence,modifiedSequence,continueProcessingPredicate,pretty){return new LcsDiff(originalSequence,modifiedSequence,continueProcessingPredicate).ComputeDiff(pretty)}class LineSequence{constructor(lines){const startColumns=[],endColumns=[];for(let i=0,length=lines.length;i<length;i++)startColumns[i]=getFirstNonBlankColumn(lines[i],1),endColumns[i]=getLastNonBlankColumn(lines[i],1);this.lines=lines,this._startColumns=startColumns,this._endColumns=endColumns}getElements(){const elements=[];for(let i=0,len=this.lines.length;i<len;i++)elements[i]=this.lines[i].substring(this._startColumns[i]-1,this._endColumns[i]-1);return elements}getStrictElement(index2){return this.lines[index2]}getStartLineNumber(i){return i+1}getEndLineNumber(i){return i+1}createCharSequence(shouldIgnoreTrimWhitespace,startIndex,endIndex){const charCodes=[],lineNumbers=[],columns=[];let len=0;for(let index2=startIndex;index2<=endIndex;index2++){const lineContent=this.lines[index2],startColumn=shouldIgnoreTrimWhitespace?this._startColumns[index2]:1,endColumn=shouldIgnoreTrimWhitespace?this._endColumns[index2]:lineContent.length+1;for(let col=startColumn;col<endColumn;col++)charCodes[len]=lineContent.charCodeAt(col-1),lineNumbers[len]=index2+1,columns[len]=col,len++}return new CharSequence(charCodes,lineNumbers,columns)}}class CharSequence{constructor(charCodes,lineNumbers,columns){this._charCodes=charCodes,this._lineNumbers=lineNumbers,this._columns=columns}getElements(){return this._charCodes}getStartLineNumber(i){return this._lineNumbers[i]}getStartColumn(i){return this._columns[i]}getEndLineNumber(i){return this._lineNumbers[i]}getEndColumn(i){return this._columns[i]+1}}class CharChange{constructor(originalStartLineNumber,originalStartColumn,originalEndLineNumber,originalEndColumn,modifiedStartLineNumber,modifiedStartColumn,modifiedEndLineNumber,modifiedEndColumn){this.originalStartLineNumber=originalStartLineNumber,this.originalStartColumn=originalStartColumn,this.originalEndLineNumber=originalEndLineNumber,this.originalEndColumn=originalEndColumn,this.modifiedStartLineNumber=modifiedStartLineNumber,this.modifiedStartColumn=modifiedStartColumn,this.modifiedEndLineNumber=modifiedEndLineNumber,this.modifiedEndColumn=modifiedEndColumn}static createFromDiffChange(diffChange,originalCharSequence,modifiedCharSequence){let originalStartLineNumber,originalStartColumn,originalEndLineNumber,originalEndColumn,modifiedStartLineNumber,modifiedStartColumn,modifiedEndLineNumber,modifiedEndColumn;return 0===diffChange.originalLength?(originalStartLineNumber=0,originalStartColumn=0,originalEndLineNumber=0,originalEndColumn=0):(originalStartLineNumber=originalCharSequence.getStartLineNumber(diffChange.originalStart),originalStartColumn=originalCharSequence.getStartColumn(diffChange.originalStart),originalEndLineNumber=originalCharSequence.getEndLineNumber(diffChange.originalStart+diffChange.originalLength-1),originalEndColumn=originalCharSequence.getEndColumn(diffChange.originalStart+diffChange.originalLength-1)),0===diffChange.modifiedLength?(modifiedStartLineNumber=0,modifiedStartColumn=0,modifiedEndLineNumber=0,modifiedEndColumn=0):(modifiedStartLineNumber=modifiedCharSequence.getStartLineNumber(diffChange.modifiedStart),modifiedStartColumn=modifiedCharSequence.getStartColumn(diffChange.modifiedStart),modifiedEndLineNumber=modifiedCharSequence.getEndLineNumber(diffChange.modifiedStart+diffChange.modifiedLength-1),modifiedEndColumn=modifiedCharSequence.getEndColumn(diffChange.modifiedStart+diffChange.modifiedLength-1)),new CharChange(originalStartLineNumber,originalStartColumn,originalEndLineNumber,originalEndColumn,modifiedStartLineNumber,modifiedStartColumn,modifiedEndLineNumber,modifiedEndColumn)}}class LineChange{constructor(originalStartLineNumber,originalEndLineNumber,modifiedStartLineNumber,modifiedEndLineNumber,charChanges){this.originalStartLineNumber=originalStartLineNumber,this.originalEndLineNumber=originalEndLineNumber,this.modifiedStartLineNumber=modifiedStartLineNumber,this.modifiedEndLineNumber=modifiedEndLineNumber,this.charChanges=charChanges}static createFromDiffResult(shouldIgnoreTrimWhitespace,diffChange,originalLineSequence,modifiedLineSequence,continueCharDiff,shouldComputeCharChanges,shouldPostProcessCharChanges){let originalStartLineNumber,originalEndLineNumber,modifiedStartLineNumber,modifiedEndLineNumber,charChanges;if(0===diffChange.originalLength?(originalStartLineNumber=originalLineSequence.getStartLineNumber(diffChange.originalStart)-1,originalEndLineNumber=0):(originalStartLineNumber=originalLineSequence.getStartLineNumber(diffChange.originalStart),originalEndLineNumber=originalLineSequence.getEndLineNumber(diffChange.originalStart+diffChange.originalLength-1)),0===diffChange.modifiedLength?(modifiedStartLineNumber=modifiedLineSequence.getStartLineNumber(diffChange.modifiedStart)-1,modifiedEndLineNumber=0):(modifiedStartLineNumber=modifiedLineSequence.getStartLineNumber(diffChange.modifiedStart),modifiedEndLineNumber=modifiedLineSequence.getEndLineNumber(diffChange.modifiedStart+diffChange.modifiedLength-1)),shouldComputeCharChanges&&diffChange.originalLength>0&&diffChange.originalLength<20&&diffChange.modifiedLength>0&&diffChange.modifiedLength<20&&continueCharDiff()){const originalCharSequence=originalLineSequence.createCharSequence(shouldIgnoreTrimWhitespace,diffChange.originalStart,diffChange.originalStart+diffChange.originalLength-1),modifiedCharSequence=modifiedLineSequence.createCharSequence(shouldIgnoreTrimWhitespace,diffChange.modifiedStart,diffChange.modifiedStart+diffChange.modifiedLength-1);let rawChanges=computeDiff(originalCharSequence,modifiedCharSequence,continueCharDiff,!0).changes;shouldPostProcessCharChanges&&(rawChanges=function postProcessCharChanges(rawChanges){if(rawChanges.length<=1)return rawChanges;const result=[rawChanges[0]];let prevChange=result[0];for(let i=1,len=rawChanges.length;i<len;i++){const currChange=rawChanges[i],originalMatchingLength=currChange.originalStart-(prevChange.originalStart+prevChange.originalLength),modifiedMatchingLength=currChange.modifiedStart-(prevChange.modifiedStart+prevChange.modifiedLength);Math.min(originalMatchingLength,modifiedMatchingLength)<MINIMUM_MATCHING_CHARACTER_LENGTH?(prevChange.originalLength=currChange.originalStart+currChange.originalLength-prevChange.originalStart,prevChange.modifiedLength=currChange.modifiedStart+currChange.modifiedLength-prevChange.modifiedStart):(result.push(currChange),prevChange=currChange)}return result}(rawChanges)),charChanges=[];for(let i=0,length=rawChanges.length;i<length;i++)charChanges.push(CharChange.createFromDiffChange(rawChanges[i],originalCharSequence,modifiedCharSequence))}return new LineChange(originalStartLineNumber,originalEndLineNumber,modifiedStartLineNumber,modifiedEndLineNumber,charChanges)}}class DiffComputer{constructor(originalLines,modifiedLines,opts){this.shouldComputeCharChanges=opts.shouldComputeCharChanges,this.shouldPostProcessCharChanges=opts.shouldPostProcessCharChanges,this.shouldIgnoreTrimWhitespace=opts.shouldIgnoreTrimWhitespace,this.shouldMakePrettyDiff=opts.shouldMakePrettyDiff,this.originalLines=originalLines,this.modifiedLines=modifiedLines,this.original=new LineSequence(originalLines),this.modified=new LineSequence(modifiedLines),this.continueLineDiff=createContinueProcessingPredicate(opts.maxComputationTime),this.continueCharDiff=createContinueProcessingPredicate(0===opts.maxComputationTime?0:Math.min(opts.maxComputationTime,5e3))}computeDiff(){if(1===this.original.lines.length&&0===this.original.lines[0].length)return 1===this.modified.lines.length&&0===this.modified.lines[0].length?{quitEarly:!1,changes:[]}:{quitEarly:!1,changes:[{originalStartLineNumber:1,originalEndLineNumber:1,modifiedStartLineNumber:1,modifiedEndLineNumber:this.modified.lines.length,charChanges:[{modifiedEndColumn:0,modifiedEndLineNumber:0,modifiedStartColumn:0,modifiedStartLineNumber:0,originalEndColumn:0,originalEndLineNumber:0,originalStartColumn:0,originalStartLineNumber:0}]}]};if(1===this.modified.lines.length&&0===this.modified.lines[0].length)return{quitEarly:!1,changes:[{originalStartLineNumber:1,originalEndLineNumber:this.original.lines.length,modifiedStartLineNumber:1,modifiedEndLineNumber:1,charChanges:[{modifiedEndColumn:0,modifiedEndLineNumber:0,modifiedStartColumn:0,modifiedStartLineNumber:0,originalEndColumn:0,originalEndLineNumber:0,originalStartColumn:0,originalStartLineNumber:0}]}]};const diffResult=computeDiff(this.original,this.modified,this.continueLineDiff,this.shouldMakePrettyDiff),rawChanges=diffResult.changes,quitEarly=diffResult.quitEarly;if(this.shouldIgnoreTrimWhitespace){const lineChanges=[];for(let i=0,length=rawChanges.length;i<length;i++)lineChanges.push(LineChange.createFromDiffResult(this.shouldIgnoreTrimWhitespace,rawChanges[i],this.original,this.modified,this.continueCharDiff,this.shouldComputeCharChanges,this.shouldPostProcessCharChanges));return{quitEarly,changes:lineChanges}}const result=[];let originalLineIndex=0,modifiedLineIndex=0;for(let i=-1,len=rawChanges.length;i<len;i++){const nextChange=i+1<len?rawChanges[i+1]:null,originalStop=nextChange?nextChange.originalStart:this.originalLines.length,modifiedStop=nextChange?nextChange.modifiedStart:this.modifiedLines.length;for(;originalLineIndex<originalStop&&modifiedLineIndex<modifiedStop;){const originalLine=this.originalLines[originalLineIndex],modifiedLine=this.modifiedLines[modifiedLineIndex];if(originalLine!==modifiedLine){{let originalStartColumn=getFirstNonBlankColumn(originalLine,1),modifiedStartColumn=getFirstNonBlankColumn(modifiedLine,1);for(;originalStartColumn>1&&modifiedStartColumn>1;){if(originalLine.charCodeAt(originalStartColumn-2)!==modifiedLine.charCodeAt(modifiedStartColumn-2))break;originalStartColumn--,modifiedStartColumn--}(originalStartColumn>1||modifiedStartColumn>1)&&this._pushTrimWhitespaceCharChange(result,originalLineIndex+1,1,originalStartColumn,modifiedLineIndex+1,1,modifiedStartColumn)}{let originalEndColumn=getLastNonBlankColumn(originalLine,1),modifiedEndColumn=getLastNonBlankColumn(modifiedLine,1);const originalMaxColumn=originalLine.length+1,modifiedMaxColumn=modifiedLine.length+1;for(;originalEndColumn<originalMaxColumn&&modifiedEndColumn<modifiedMaxColumn;){if(originalLine.charCodeAt(originalEndColumn-1)!==originalLine.charCodeAt(modifiedEndColumn-1))break;originalEndColumn++,modifiedEndColumn++}(originalEndColumn<originalMaxColumn||modifiedEndColumn<modifiedMaxColumn)&&this._pushTrimWhitespaceCharChange(result,originalLineIndex+1,originalEndColumn,originalMaxColumn,modifiedLineIndex+1,modifiedEndColumn,modifiedMaxColumn)}}originalLineIndex++,modifiedLineIndex++}nextChange&&(result.push(LineChange.createFromDiffResult(this.shouldIgnoreTrimWhitespace,nextChange,this.original,this.modified,this.continueCharDiff,this.shouldComputeCharChanges,this.shouldPostProcessCharChanges)),originalLineIndex+=nextChange.originalLength,modifiedLineIndex+=nextChange.modifiedLength)}return{quitEarly,changes:result}}_pushTrimWhitespaceCharChange(result,originalLineNumber,originalStartColumn,originalEndColumn,modifiedLineNumber,modifiedStartColumn,modifiedEndColumn){if(this._mergeTrimWhitespaceCharChange(result,originalLineNumber,originalStartColumn,originalEndColumn,modifiedLineNumber,modifiedStartColumn,modifiedEndColumn))return;let charChanges;this.shouldComputeCharChanges&&(charChanges=[new CharChange(originalLineNumber,originalStartColumn,originalLineNumber,originalEndColumn,modifiedLineNumber,modifiedStartColumn,modifiedLineNumber,modifiedEndColumn)]),result.push(new LineChange(originalLineNumber,originalLineNumber,modifiedLineNumber,modifiedLineNumber,charChanges))}_mergeTrimWhitespaceCharChange(result,originalLineNumber,originalStartColumn,originalEndColumn,modifiedLineNumber,modifiedStartColumn,modifiedEndColumn){const len=result.length;if(0===len)return!1;const prevChange=result[len-1];return 0!==prevChange.originalEndLineNumber&&0!==prevChange.modifiedEndLineNumber&&(prevChange.originalEndLineNumber+1===originalLineNumber&&prevChange.modifiedEndLineNumber+1===modifiedLineNumber&&(prevChange.originalEndLineNumber=originalLineNumber,prevChange.modifiedEndLineNumber=modifiedLineNumber,this.shouldComputeCharChanges&&prevChange.charChanges&&prevChange.charChanges.push(new CharChange(originalLineNumber,originalStartColumn,originalLineNumber,originalEndColumn,modifiedLineNumber,modifiedStartColumn,modifiedLineNumber,modifiedEndColumn)),!0))}}function getFirstNonBlankColumn(txt,defaultValue){const r=function firstNonWhitespaceIndex(str){for(let i=0,len=str.length;i<len;i++){const chCode=str.charCodeAt(i);if(32!==chCode&&9!==chCode)return i}return-1}(txt);return-1===r?defaultValue:r+1}function getLastNonBlankColumn(txt,defaultValue){const r=function lastNonWhitespaceIndex(str,startIndex=str.length-1){for(let i=startIndex;i>=0;i--){const chCode=str.charCodeAt(i);if(32!==chCode&&9!==chCode)return i}return-1}(txt);return-1===r?defaultValue:r+2}function createContinueProcessingPredicate(maximumRuntime){if(0===maximumRuntime)return()=>!0;const startTime=Date.now();return()=>Date.now()-startTime<maximumRuntime}var index=(originalLines,modifiedLines,opts={})=>new DiffComputer(originalLines,modifiedLines,Object.assign({shouldComputeCharChanges:!0,shouldPostProcessCharChanges:!0,shouldIgnoreTrimWhitespace:!0,shouldMakePrettyDiff:!0,maxComputationTime:5e3},opts)).computeDiff().changes},"./node_modules/range-at-index/build/index.js":module=>{module.exports=function RangeAtIndex(el,index,offset,range){var doc=el.ownerDocument;range||(range=doc.createRange());var iterator=doc.createNodeIterator(el,NodeFilter.SHOW_TEXT,null,!1),start={},end={},node=void 0,len=void 0;for(;node=iterator.nextNode();)len=node.nodeValue.length,!start.node&&len>index&&(start.node=node,start.offset=index),!end.node&&len>=offset&&(end.node=node,end.offset=offset),index-=len,offset-=len;start.node&&range.setStart(start.node,start.offset);end.node&&range.setEnd(end.node,end.offset);return range}},"./node_modules/react/cjs/react-jsx-runtime.production.min.js":(__unused_webpack_module,exports,__webpack_require__)=>{var f=__webpack_require__("./node_modules/react/index.js"),k=Symbol.for("react.element"),l=Symbol.for("react.fragment"),m=Object.prototype.hasOwnProperty,n=f.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner,p={key:!0,ref:!0,__self:!0,__source:!0};function q(c,a,g){var b,d={},e=null,h=null;for(b in void 0!==g&&(e=""+g),void 0!==a.key&&(e=""+a.key),void 0!==a.ref&&(h=a.ref),a)m.call(a,b)&&!p.hasOwnProperty(b)&&(d[b]=a[b]);if(c&&c.defaultProps)for(b in a=c.defaultProps)void 0===d[b]&&(d[b]=a[b]);return{$$typeof:k,type:c,key:e,ref:h,props:d,_owner:n.current}}exports.Fragment=l,exports.jsx=q,exports.jsxs=q},"./node_modules/react/jsx-runtime.js":(module,__unused_webpack_exports,__webpack_require__)=>{module.exports=__webpack_require__("./node_modules/react/cjs/react-jsx-runtime.production.min.js")},"./node_modules/use-sync-external-store/cjs/use-sync-external-store-shim.production.min.js":(__unused_webpack_module,exports,__webpack_require__)=>{var e=__webpack_require__("./node_modules/react/index.js");var k="function"==typeof Object.is?Object.is:function h(a,b){return a===b&&(0!==a||1/a==1/b)||a!=a&&b!=b},l=e.useState,m=e.useEffect,n=e.useLayoutEffect,p=e.useDebugValue;function r(a){var b=a.getSnapshot;a=a.value;try{var d=b();return!k(a,d)}catch(f){return!0}}var u="undefined"==typeof window||void 0===window.document||void 0===window.document.createElement?function t(a,b){return b()}:function q(a,b){var d=b(),f=l({inst:{value:d,getSnapshot:b}}),c=f[0].inst,g=f[1];return n((function(){c.value=d,c.getSnapshot=b,r(c)&&g({inst:c})}),[a,d,b]),m((function(){return r(c)&&g({inst:c}),a((function(){r(c)&&g({inst:c})}))}),[a]),p(d),d};exports.useSyncExternalStore=void 0!==e.useSyncExternalStore?e.useSyncExternalStore:u},"./node_modules/use-sync-external-store/shim/index.js":(module,__unused_webpack_exports,__webpack_require__)=>{module.exports=__webpack_require__("./node_modules/use-sync-external-store/cjs/use-sync-external-store-shim.production.min.js")}}]);