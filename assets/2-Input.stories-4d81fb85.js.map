{"version":3,"file":"2-Input.stories-4d81fb85.js","sources":["../../src/input.tsx"],"sourcesContent":["import {\n  useEffect,\n  useRef,\n  useState,\n  useMemo,\n  useCallback,\n  forwardRef,\n  useImperativeHandle,\n} from \"react\";\nimport { useSyncExternalStore } from \"use-sync-external-store/shim/index.js\";\n// @ts-expect-error no type definition\nimport rangeAtIndex from \"range-at-index\";\nimport {\n  dispatchClonedMouseEvent,\n  dispatchMouseMoveEvent,\n  dispatchMouseOutEvent,\n  getHorizontalPadding,\n  getPointedElement,\n  getStyle,\n  getVerticalPadding,\n  hasPercentageUnit,\n  isSafari,\n  stopPropagation,\n  syncBackdropStyle,\n} from \"./dom\";\nimport { initSelectionStore } from \"./selection\";\nimport { useIsomorphicLayoutEffect } from \"./useIsomorphicLayoutEffect\";\nimport type { CaretPosition, Renderer } from \"./types\";\nimport { refKey } from \"./utils\";\nimport { useStatic } from \"./useStatic\";\n\n// for caret position detection\nconst CARET_DETECTOR = <span style={{ color: \"transparent\" }}>{\"\\u200b\"}</span>;\n\n/**\n * Methods of {@link RichInput}.\n *\n * All the others not mentioned are proxied to ref of [input](https://developer.mozilla.org/en-US/docs/Web/API/HTMLInputElement).\n *\n * | Name              | Type     | Description                                                            |\n * | ----------------- | -------- | ---------------------------------------------------------------------- |\n * | selectionStart    | `number` | Same as original but has handling of composition event                    |\n * | selectionEnd      | `number` | Same as original but has handling of composition event                    |\n * | setSelectionRange |          | Same as original but with focus                                           |\n * | setRangeText      |          | Same as original but has fallback to `document.execCommand(\"insertText\")` |\n */\nexport interface RichInputHandle extends HTMLInputElement {}\n\n/**\n * Props of {@link RichInput}.\n *\n * For other props not mentioned below will be passed to [input](https://developer.mozilla.org/en-US/docs/Web/API/HTMLInputElement).\n * `defaultValue` is omitted for simplicity of logic.\n */\nexport interface RichInputProps\n  extends Omit<\n    JSX.IntrinsicElements[\"input\"],\n    \"value\" | \"defaultValue\" | \"children\"\n  > {\n  /**\n   * Same as original but only string\n   */\n  value: string;\n  /**\n   * Render function to create customized view from value.\n   *\n   * This function should return ReactNodes which texts are positioned the same as textarea (see examples for detailed usage).\n   *\n   * On the rendered nodes, currently limited event handlers will work.\n   * - `onClick`\n   * - `onMouseOver`\n   * - `onMouseOut`\n   * - `onMouseMove`\n   * - `onMouseDown`\n   * - `onMouseUp`\n   * @defaultValue undefined\n   */\n  children?: Renderer;\n  /**\n   * If true, textarea height is automatically resized and height of style prop does not work. Set `maxHeight` to style prop if you need limit.\n   * @defaultValue undefined\n   */\n  autoHeight?: boolean;\n  /**\n   * Called when selection in textarea changes. It gives position of caret at the time, which is useful to position menu.\n   * @defaultValue undefined\n   */\n  onSelectionChange?: (pos: CaretPosition, value: string) => void;\n}\n\n/**\n * Input component with some extra props. See {@link RichInputProps} and {@link RichInputHandle}.\n * @category Component\n */\nexport const RichInput = forwardRef<RichInputHandle, RichInputProps>(\n  (\n    {\n      children: render,\n      value,\n      autoHeight,\n      style,\n      onKeyDown,\n      onSelectionChange,\n      ...props\n    },\n    propRef\n  ): React.ReactElement => {\n    const textAreaRef = useRef<HTMLInputElement>(null);\n    const backdropRef = useRef<HTMLDivElement>(null);\n    const [[width, height, hPadding, vPadding], setRect] = useState<\n      [width: number, height: number, hPadding: number, vPadding: number]\n    >([0, 0, 0, 0]);\n    const [focused, setFocused] = useState<boolean>(false);\n\n    const caretColorRef = useRef(\"\");\n    const pointedRef = useRef<HTMLElement | null>(null);\n\n    const selectionStore = useStatic(() => initSelectionStore(textAreaRef));\n    const [selectionStart, selectionEnd] = useSyncExternalStore(\n      selectionStore._subscribe,\n      selectionStore._getSelection,\n      selectionStore._getSelection\n    );\n\n    const totalWidth = width + hPadding;\n    const totalHeight = height + vPadding;\n\n    const isSizeCalculated = !!(totalWidth + totalHeight);\n\n    useImperativeHandle(\n      propRef,\n      () => {\n        const el = textAreaRef[refKey]!;\n        const overrides = {\n          get selectionStart() {\n            const sel = selectionStore._getSelectionStart();\n            if (sel == null) {\n              return 0;\n            } else {\n              return sel;\n            }\n          },\n          get selectionEnd() {\n            const sel = selectionStore._getSelectionEnd();\n            if (sel == null) {\n              return 0;\n            } else {\n              return sel;\n            }\n          },\n          setSelectionRange(\n            ...args: Parameters<HTMLInputElement[\"setSelectionRange\"]>\n          ) {\n            el.focus();\n            el.setSelectionRange(...args);\n          },\n          setRangeText(\n            text: string,\n            start: number,\n            end: number,\n            preserve?: SelectionMode\n          ) {\n            if (el.setRangeText) {\n              el.setRangeText(text, start, end, preserve);\n            } else {\n              el.focus();\n              el.selectionStart = start;\n              el.selectionEnd = end;\n              document.execCommand(\"insertText\", false, text);\n            }\n            // Invoke onChange to lift state up\n            el.dispatchEvent(new Event(\"input\", { bubbles: true }));\n          },\n        };\n\n        return new Proxy(el, {\n          get(target, prop: keyof HTMLInputElement) {\n            if ((overrides as any)[prop]) {\n              return (overrides as any)[prop];\n            }\n            const value = target[prop];\n            return typeof value === \"function\" ? value.bind(target) : value;\n          },\n        }) as HTMLInputElement;\n      },\n      [textAreaRef]\n    );\n\n    useIsomorphicLayoutEffect(() => {\n      const textarea = textAreaRef[refKey];\n      const backdrop = backdropRef[refKey];\n      if (!textarea || !backdrop) return;\n      const observer = new ResizeObserver(([entry]) => {\n        const { contentRect, borderBoxSize } = entry!;\n        if (borderBoxSize && borderBoxSize[0]) {\n          setRect([\n            contentRect.width,\n            contentRect.height,\n            borderBoxSize[0].inlineSize - contentRect.width,\n            borderBoxSize[0].blockSize - contentRect.height,\n          ]);\n          return;\n        }\n        const style = getStyle(textarea);\n        setRect([\n          contentRect.width,\n          contentRect.height,\n          getHorizontalPadding(style),\n          getVerticalPadding(style),\n        ]);\n      });\n\n      const onFocus = () => {\n        setFocused(true);\n      };\n      const onBlur = () => {\n        setFocused(false);\n      };\n      const onScroll = () => {\n        const { scrollTop, scrollLeft } = textarea;\n        backdrop.style.transform = `translate(${-scrollLeft}px, ${-scrollTop}px)`;\n      };\n      const onMouseDown = (e: MouseEvent) => {\n        selectionStore._updateSeletion();\n        const mouseup = () => {\n          selectionStore._updateSeletion();\n          document.removeEventListener(\"mouseup\", mouseup);\n        };\n        document.addEventListener(\"mouseup\", mouseup);\n        const pointed = getPointedElement(textarea, backdrop, e);\n        if (pointed) {\n          dispatchClonedMouseEvent(pointed, e);\n        }\n      };\n      const onMouseUp = (e: MouseEvent) => {\n        const pointed = getPointedElement(textarea, backdrop, e);\n        if (pointed) {\n          dispatchClonedMouseEvent(pointed, e);\n        }\n      };\n      const onMouseMove = (e: MouseEvent) => {\n        const pointed = getPointedElement(textarea, backdrop, e);\n        dispatchMouseMoveEvent(pointed, pointedRef, e);\n      };\n      const onMouseLeave = (e: MouseEvent) => {\n        dispatchMouseOutEvent(pointedRef, e, null);\n      };\n      const onClick = (e: MouseEvent) => {\n        const pointed = getPointedElement(textarea, backdrop, e);\n        if (pointed) {\n          dispatchClonedMouseEvent(pointed, e);\n        }\n      };\n      const onInput = () => {\n        selectionStore._updateSeletion();\n      };\n      const onCompositionStart = (e: CompositionEvent) => {\n        selectionStore._setComposition(e);\n      };\n      const onCompositionUpdate = (e: CompositionEvent) => {\n        selectionStore._setComposition(e);\n      };\n      const onCompositionEnd = () => {\n        selectionStore._setComposition();\n      };\n\n      textarea.addEventListener(\"focus\", onFocus);\n      textarea.addEventListener(\"blur\", onBlur);\n      textarea.addEventListener(\"scroll\", onScroll);\n      textarea.addEventListener(\"mousedown\", onMouseDown);\n      textarea.addEventListener(\"mouseup\", onMouseUp);\n      textarea.addEventListener(\"mousemove\", onMouseMove);\n      textarea.addEventListener(\"mouseleave\", onMouseLeave);\n      textarea.addEventListener(\"click\", onClick);\n      textarea.addEventListener(\"input\", onInput);\n      textarea.addEventListener(\"compositionstart\", onCompositionStart);\n      textarea.addEventListener(\"compositionupdate\", onCompositionUpdate);\n      textarea.addEventListener(\"compositionend\", onCompositionEnd);\n      observer.observe(textarea);\n      return () => {\n        textarea.removeEventListener(\"focus\", onFocus);\n        textarea.removeEventListener(\"blur\", onBlur);\n        textarea.removeEventListener(\"scroll\", onScroll);\n        textarea.removeEventListener(\"mousedown\", onMouseDown);\n        textarea.removeEventListener(\"mouseup\", onMouseUp);\n        textarea.removeEventListener(\"mousemove\", onMouseMove);\n        textarea.removeEventListener(\"mouseleave\", onMouseLeave);\n        textarea.removeEventListener(\"click\", onClick);\n        textarea.removeEventListener(\"input\", onInput);\n        textarea.removeEventListener(\"compositionstart\", onCompositionStart);\n        textarea.removeEventListener(\"compositionupdate\", onCompositionUpdate);\n        textarea.removeEventListener(\"compositionend\", onCompositionEnd);\n        observer.disconnect();\n      };\n    }, []);\n\n    useIsomorphicLayoutEffect(() => {\n      // Sync backdrop style\n      const textarea = textAreaRef[refKey];\n      const backdrop = backdropRef[refKey];\n      if (!backdrop || !textarea) return;\n      syncBackdropStyle(textarea, backdrop, caretColorRef, style);\n    }, [style]);\n\n    useEffect(() => {\n      if (selectionStart == null || selectionEnd == null || !onSelectionChange)\n        return;\n      if (!focused) {\n        onSelectionChange(\n          {\n            focused: false,\n            selectionStart: selectionStart,\n            selectionEnd: selectionEnd,\n          },\n          value\n        );\n      } else {\n        const range = rangeAtIndex(\n          backdropRef[refKey],\n          selectionStart,\n          selectionStart + 1\n        ) as Range;\n        const rect = range.getBoundingClientRect();\n        onSelectionChange(\n          {\n            focused: true,\n            top: rect.top,\n            left: rect.left,\n            height: rect.height,\n            selectionStart: selectionStart,\n            selectionEnd: selectionEnd,\n          },\n          value\n        );\n      }\n    }, [focused, selectionStart, selectionEnd]);\n\n    useEffect(() => {\n      if (!isSafari()) return;\n\n      // FIXME: Safari does not fire scroll event on input so substitute with pseudo selection change event\n      return selectionStore._subscribe(() => {\n        if (!textAreaRef[refKey] || !backdropRef[refKey]) return;\n        const { scrollTop, scrollLeft } = textAreaRef[refKey];\n        backdropRef[\n          refKey\n        ].style.transform = `translate(${-scrollLeft}px, ${-scrollTop}px)`;\n      });\n    }, []);\n\n    useEffect(() => {\n      const textarea = textAreaRef[refKey];\n      if (!autoHeight || !textarea) return;\n      textarea.style.height = \"auto\";\n      textarea.style.height = `${textarea.scrollHeight}px`;\n    });\n\n    return (\n      <div\n        style={useMemo((): React.CSSProperties => {\n          let w: React.CSSProperties[\"width\"] = totalWidth;\n          let h: React.CSSProperties[\"height\"] = totalHeight;\n          // Prefer prop style to avoid miscalculation https://github.com/inokawa/rich-textarea/issues/39\n          if (style) {\n            if (hasPercentageUnit(style.width)) {\n              w = style.width;\n            }\n            if (hasPercentageUnit(style.height)) {\n              h = style.height;\n            }\n          }\n          return {\n            display: \"inline-block\",\n            position: \"relative\",\n            width: w,\n            height: h,\n          };\n        }, [totalWidth, totalHeight, style])}\n      >\n        <div\n          style={useMemo((): React.CSSProperties => {\n            const s: React.CSSProperties = {\n              position: \"absolute\",\n              overflow: \"hidden\",\n              top: 0,\n              left: 0,\n              width: totalWidth,\n              height: totalHeight,\n            };\n            if (!style) return s;\n            ([\"background\", \"backgroundColor\"] as const).forEach((k) => {\n              if (style[k]) s[k] = style[k] as any;\n            });\n            return s;\n          }, [totalWidth, totalHeight, style])}\n        >\n          <div\n            ref={backdropRef}\n            aria-hidden\n            // Stop propagation of events dispatched on backdrop\n            onClick={stopPropagation}\n            onMouseDown={stopPropagation}\n            onMouseUp={stopPropagation}\n            onMouseOver={stopPropagation}\n            onMouseOut={stopPropagation}\n            onMouseMove={stopPropagation}\n          >\n            <div style={{ width, height, overflow: \"hidden\" }}>\n              <div\n                style={useMemo(\n                  (): React.CSSProperties => ({\n                    transform: \"translate(0px, 0px)\",\n                    pointerEvents: \"none\",\n                    userSelect: \"none\",\n                    msUserSelect: \"none\",\n                    WebkitUserSelect: \"none\",\n                    // https://github.com/inokawa/rich-textarea/issues/56\n                    boxSizing: \"content-box\",\n                    // https://stackoverflow.com/questions/2545542/font-size-rendering-inconsistencies-on-an-iphone\n                    textSizeAdjust: \"100%\",\n                    WebkitTextSizeAdjust: \"100%\",\n                    whiteSpace: \"pre\",\n                  }),\n                  []\n                )}\n              >\n                {useMemo(\n                  () => (render ? render(value) : value),\n                  [value, render]\n                )}\n                {CARET_DETECTOR}\n              </div>\n            </div>\n          </div>\n        </div>\n        <input\n          {...props}\n          ref={textAreaRef}\n          value={value}\n          style={useMemo(\n            () => ({\n              ...style,\n              background: \"transparent\",\n              margin: 0,\n              // Set `position: absolute` to fix bug that sometimes texts disappear in Chrome for unknown reason\n              position: \"absolute\",\n              // And remove it until element size is calculated to avoid layout shift on mount\n              // https://github.com/inokawa/rich-textarea/issues/21\n              ...(!isSizeCalculated && {\n                position: undefined,\n                verticalAlign: \"top\",\n              }),\n            }),\n            [style, isSizeCalculated]\n          )}\n          onKeyDown={useCallback(\n            (e: React.KeyboardEvent<HTMLInputElement>) => {\n              // Ignore keydown events during IME composition.\n              // Safari sometimes fires keydown event after compositionend so also ignore it.\n              // https://developer.mozilla.org/en-US/docs/Web/API/Document/keydown_event#ignoring_keydown_during_ime_composition\n              if (e.nativeEvent.isComposing || e.nativeEvent.keyCode === 229) {\n                return;\n              }\n\n              onKeyDown?.(e);\n              selectionStore._updateSeletion();\n            },\n            [onKeyDown]\n          )}\n        />\n      </div>\n    );\n  }\n);\n"],"names":["CARET_DETECTOR","jsx","RichInput","forwardRef","render","value","autoHeight","style","onKeyDown","onSelectionChange","props","propRef","textAreaRef","useRef","backdropRef","width","height","hPadding","vPadding","setRect","useState","focused","setFocused","caretColorRef","pointedRef","selectionStore","useStatic","initSelectionStore","selectionStart","selectionEnd","useSyncExternalStore","totalWidth","totalHeight","isSizeCalculated","useImperativeHandle","el","refKey","overrides","sel","args","text","start","end","preserve","target","prop","value2","useIsomorphicLayoutEffect","textarea","backdrop","observer","entry","contentRect","borderBoxSize","style2","getStyle","getHorizontalPadding","getVerticalPadding","onFocus","onBlur","onScroll","scrollTop","scrollLeft","onMouseDown","e","mouseup","pointed","getPointedElement","dispatchClonedMouseEvent","onMouseUp","onMouseMove","dispatchMouseMoveEvent","onMouseLeave","dispatchMouseOutEvent","onClick","onInput","onCompositionStart","onCompositionUpdate","onCompositionEnd","syncBackdropStyle","useEffect","rect","rangeAtIndex","isSafari","jsxs","useMemo","w","h","hasPercentageUnit","s","k","stopPropagation","useCallback"],"mappings":"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"}