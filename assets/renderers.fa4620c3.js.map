{"version":3,"file":"renderers.fa4620c3.js","sources":["../../src/regex.ts","../../src/utils.ts","../../src/renderers.tsx"],"sourcesContent":["export const execReg = (reg: RegExp, text: string): RegExpExecArray[] => {\n  const results: RegExpExecArray[] = [];\n  let match = reg.exec(text);\n  while (!!match) {\n    results.push(match);\n    match = reg.exec(text);\n  }\n  return results;\n};\n","export type RangeChunk = [start: number, end: number, styleId: number];\n\nexport const merge = (\n  ranges: RangeChunk[]\n): [number, number, { [key: number]: true | undefined }][] => {\n  ranges.sort((a, b) => a[0] - b[0] || a[1] - b[1]);\n\n  const results: [number, number, { [key in number]: true | undefined }][] = [];\n  let last: [number, number, { [key in number]: true | undefined }];\n\n  ranges.forEach(([start, end, styleId]) => {\n    if (!last || start >= last[1]) {\n      results.push((last = [start, end, { [styleId]: true }]));\n    } else if (end > last[1]) {\n      last[2][styleId] = true;\n      results.push((last = [last[1], end, { [styleId]: true }]));\n    } else if (end <= last[1]) {\n      const lastEnd = last[1];\n      const lastStyle = { ...last[2] };\n      const lastStyle2 = { ...last[2] };\n      if (last[0] !== start) {\n        last[1] = start;\n      } else {\n        results.pop();\n      }\n      lastStyle[styleId] = true;\n      results.push((last = [start, end, lastStyle]));\n      if (end !== lastEnd) {\n        results.push((last = [end, lastEnd, lastStyle2]));\n      }\n    }\n  });\n\n  return results;\n};\n","import { execReg } from \"./regex\";\nimport { RangeChunk, merge } from \"./utils\";\n\nexport type Renderer = (value: string) => React.ReactNode;\n\nexport type StyleOrRender =\n  | React.CSSProperties\n  | ((props: {\n      children: React.ReactNode;\n      value: string;\n      key?: string | undefined;\n    }) => React.ReactNode);\n\nexport const createRegexRenderer = (\n  matchers: [RegExp, StyleOrRender][]\n): Renderer => {\n  return (value) => {\n    const styles: { [key: string]: StyleOrRender } = {};\n    const ranges: RangeChunk[] = [];\n    matchers.forEach(([matcher, style], i) => {\n      ranges.push(\n        ...execReg(matcher, value).map((m): RangeChunk => {\n          const start = m.index;\n          const end = m.index + m[0]!.length;\n          return [start, end, i];\n        })\n      );\n      styles[String(i)] = style;\n    });\n\n    const chunks = merge(ranges);\n    const res: React.ReactNode[] = [];\n    let prevEnd = 0;\n    // let prevStart = 0;\n    for (let i = 0; i < chunks.length; i++) {\n      const [start, end, styleIds] = chunks[i]!;\n      res.push(value.slice(prevEnd, start));\n\n      const v = value.slice(start, end);\n      res.push(\n        Object.keys(styleIds).reduceRight((acc, si, index) => {\n          const styleOrRender = styles[si];\n          const key = index === 0 ? String(start) : undefined;\n          if (typeof styleOrRender === \"function\") {\n            return styleOrRender({ children: acc, value: v, key });\n          } else {\n            return (\n              <span key={key} style={styleOrRender}>\n                {acc}\n              </span>\n            );\n          }\n        }, v as React.ReactNode)\n      );\n      prevEnd = end;\n      // prevStart = start;\n    }\n    res.push(value.slice(prevEnd));\n    return res;\n  };\n};\n"],"names":["execReg","reg","text","results","match","merge","ranges","a","b","last","start","end","styleId","lastEnd","lastStyle","lastStyle2","createRegexRenderer","matchers","value","styles","m","i","style","chunks","res","prevEnd","styleIds","v","styleOrRender","si","key","index","acc","_jsx"],"mappings":"8CAAa,MAAAA,EAAU,CAACC,EAAaC,IAAoC,CACvE,MAAMC,EAA6B,CAAA,EAC/B,IAAAC,EAAQH,EAAI,KAAKC,CAAI,EAClB,KAAEE,GACPD,EAAQ,KAAKC,CAAK,EACVA,EAAAH,EAAI,KAAKC,CAAI,EAEhB,OAAAC,CACT,ECNaE,EACXC,GAC4D,CACrDA,EAAA,KAAK,CAACC,EAAGC,IAAMD,EAAE,GAAKC,EAAE,IAAMD,EAAE,GAAKC,EAAE,EAAE,EAEhD,MAAML,EAAqE,CAAA,EACvE,IAAAM,EAEJ,OAAAH,EAAO,QAAQ,CAAC,CAACI,EAAOC,EAAKC,CAAO,IAAM,CACxC,GAAI,CAACH,GAAQC,GAASD,EAAK,GACjBN,EAAA,KAAMM,EAAO,CAACC,EAAOC,EAAK,CAAE,CAACC,GAAU,EAAM,CAAA,CAAE,UAC9CD,EAAMF,EAAK,GACpBA,EAAK,GAAGG,GAAW,GACXT,EAAA,KAAMM,EAAO,CAACA,EAAK,GAAIE,EAAK,CAAE,CAACC,GAAU,EAAK,CAAC,CAAE,UAChDD,GAAOF,EAAK,GAAI,CACzB,MAAMI,EAAUJ,EAAK,GACfK,EAAY,CAAE,GAAGL,EAAK,EAAG,EACzBM,EAAa,CAAE,GAAGN,EAAK,EAAG,EAC5BA,EAAK,KAAOC,EACdD,EAAK,GAAKC,EAEVP,EAAQ,IAAI,EAEdW,EAAUF,GAAW,GACrBT,EAAQ,KAAMM,EAAO,CAACC,EAAOC,EAAKG,CAAS,CAAE,EACzCH,IAAQE,GACVV,EAAQ,KAAMM,EAAO,CAACE,EAAKE,EAASE,CAAU,CAAE,CAEpD,CAAA,CACD,EAEMZ,CACT,ECrBOa,EAAAC,GAGLC,GAAA,CACE,MAAAC,EAAA,CAAA,EACAb,EAAA,CAAA,EACAW,EAAAA,QAAAA,CAAAA,CAAAA,EAAAA,CAAAA,EAAAA,IAAAA,CACEX,EAAAA,KAAAA,GAAAA,EAAAA,EAAAA,CAAAA,EAAAA,IAAAA,GAAAA,CAEI,MAAAI,EAAAU,EAAA,MACAT,EAAAS,EAAA,MAAAA,EAAA,GAAA,OACA,MAAA,CAAAV,EAAAC,EAAAU,CAAA,CAAqB,CAAA,CAAA,EAGzBF,EAAAA,OAAAA,CAAAA,GAAAA,CAAoBG,CAAAA,EAGtB,MAAAC,EAAAlB,EAAAC,CAAA,EACAkB,EAAA,CAAA,EACA,IAAAC,EAAA,EAEA,QAAAJ,EAAA,EAAAA,EAAAE,EAAA,OAAAF,IAAA,CACE,KAAA,CAAAX,EAAAC,EAAAe,CAAA,EAAAH,EAAAF,GACAG,EAAAA,KAAAA,EAAAA,MAAAA,EAAAA,CAAAA,CAAAA,EAEA,MAAAG,EAAAT,EAAA,MAAAR,EAAAC,CAAA,EACAa,EAAAA,KAAAA,OAAAA,KAAAA,CAAAA,EAAAA,YAAAA,CAAAA,EAAAA,EAAAA,IAAAA,CAEI,MAAAI,EAAAT,EAAAU,GACAC,EAAAC,IAAA,EAAA,OAAArB,CAAA,EAAA,OACA,OAAA,OAAAkB,GAAA,WACEA,EAAA,CAAqB,SAAAI,EAAYA,MAAAA,EAAYL,IAAAA,CAAGG,CAAAA,EAEhDG,EAAA,OAAA,CACE,MAAAL,EAAuBA,SAAAA,CACpBI,EAAAA,CAAAA,CAGP,EAAAL,CAAA,CAAA,EAGJF,EAAAA,CAAUd,CAGZa,OAAAA,EAAAA,KAAAA,EAAAA,MAAAA,CAAAA,CAAAA,EACAA,CAAOA"}