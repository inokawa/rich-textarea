{"version":3,"file":"Emoji.stories.f2f53ed0.js","sources":["../../node_modules/lodash/_iteratorToArray.js","../../node_modules/lodash/_baseValues.js","../../node_modules/lodash/values.js","../../node_modules/lodash/toArray.js","../../node_modules/node-emoji/lib/emoji.js","../../node_modules/node-emoji/index.js","../../stories/examples/Emoji.stories.tsx"],"sourcesContent":["/**\n * Converts `iterator` to an array.\n *\n * @private\n * @param {Object} iterator The iterator to convert.\n * @returns {Array} Returns the converted array.\n */\nfunction iteratorToArray(iterator) {\n  var data,\n      result = [];\n\n  while (!(data = iterator.next()).done) {\n    result.push(data.value);\n  }\n  return result;\n}\n\nmodule.exports = iteratorToArray;\n","var arrayMap = require('./_arrayMap');\n\n/**\n * The base implementation of `_.values` and `_.valuesIn` which creates an\n * array of `object` property values corresponding to the property names\n * of `props`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {Array} props The property names to get values for.\n * @returns {Object} Returns the array of property values.\n */\nfunction baseValues(object, props) {\n  return arrayMap(props, function(key) {\n    return object[key];\n  });\n}\n\nmodule.exports = baseValues;\n","var baseValues = require('./_baseValues'),\n    keys = require('./keys');\n\n/**\n * Creates an array of the own enumerable string keyed property values of `object`.\n *\n * **Note:** Non-object values are coerced to objects.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Object\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property values.\n * @example\n *\n * function Foo() {\n *   this.a = 1;\n *   this.b = 2;\n * }\n *\n * Foo.prototype.c = 3;\n *\n * _.values(new Foo);\n * // => [1, 2] (iteration order is not guaranteed)\n *\n * _.values('hi');\n * // => ['h', 'i']\n */\nfunction values(object) {\n  return object == null ? [] : baseValues(object, keys(object));\n}\n\nmodule.exports = values;\n","var Symbol = require('./_Symbol'),\n    copyArray = require('./_copyArray'),\n    getTag = require('./_getTag'),\n    isArrayLike = require('./isArrayLike'),\n    isString = require('./isString'),\n    iteratorToArray = require('./_iteratorToArray'),\n    mapToArray = require('./_mapToArray'),\n    setToArray = require('./_setToArray'),\n    stringToArray = require('./_stringToArray'),\n    values = require('./values');\n\n/** `Object#toString` result references. */\nvar mapTag = '[object Map]',\n    setTag = '[object Set]';\n\n/** Built-in value references. */\nvar symIterator = Symbol ? Symbol.iterator : undefined;\n\n/**\n * Converts `value` to an array.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Lang\n * @param {*} value The value to convert.\n * @returns {Array} Returns the converted array.\n * @example\n *\n * _.toArray({ 'a': 1, 'b': 2 });\n * // => [1, 2]\n *\n * _.toArray('abc');\n * // => ['a', 'b', 'c']\n *\n * _.toArray(1);\n * // => []\n *\n * _.toArray(null);\n * // => []\n */\nfunction toArray(value) {\n  if (!value) {\n    return [];\n  }\n  if (isArrayLike(value)) {\n    return isString(value) ? stringToArray(value) : copyArray(value);\n  }\n  if (symIterator && value[symIterator]) {\n    return iteratorToArray(value[symIterator]());\n  }\n  var tag = getTag(value),\n      func = tag == mapTag ? mapToArray : (tag == setTag ? setToArray : values);\n\n  return func(value);\n}\n\nmodule.exports = toArray;\n","/*jslint node: true*/\nvar toArray = require('lodash/toArray');\nvar emojiByName = require('./emoji.json');\n\n\"use strict\";\n\n/**\n * regex to parse emoji in a string - finds emoji, e.g. :coffee:\n */\nvar emojiNameRegex = /:([a-zA-Z0-9_\\-\\+]+):/g;\n\n/**\n * regex to trim whitespace\n * use instead of String.prototype.trim() for IE8 support\n */\nvar trimSpaceRegex = /^[\\s\\uFEFF\\xA0]+|[\\s\\uFEFF\\xA0]+$/g;\n\n/**\n * Removes colons on either side\n * of the string if present\n * @param  {string} str\n * @return {string}\n */\nfunction stripColons (str) {\n  var colonIndex = str.indexOf(':');\n  if (colonIndex > -1) {\n    // :emoji: (http://www.emoji-cheat-sheet.com/)\n    if (colonIndex === str.length - 1) {\n      str = str.substring(0, colonIndex);\n      return stripColons(str);\n    } else {\n      str = str.substr(colonIndex + 1);\n      return stripColons(str);\n    }\n  }\n\n  return str;\n}\n\n/**\n * Adds colons to either side\n * of the string\n * @param {string} str\n * @return {string}\n */\nfunction wrapColons (str) {\n  return (typeof str === 'string' && str.length > 0) ? ':' + str + ':' : str;\n}\n\n/**\n * Ensure that the word is wrapped in colons\n * by only adding them, if they are not there.\n * @param {string} str\n * @return {string}\n */\nfunction ensureColons (str) {\n  return (typeof str === 'string' && str[0] !== ':') ? wrapColons(str) : str;\n}\n\n// Non spacing mark, some emoticons have them. It's the 'Variant Form',\n// which provides more information so that emoticons can be rendered as\n// more colorful graphics. FE0E is a unicode text version, where as FE0F\n// should be rendered as a graphical version. The code gracefully degrades.\nvar NON_SPACING_MARK = String.fromCharCode(65039); // 65039 - '️' - 0xFE0F;\nvar nonSpacingRegex = new RegExp(NON_SPACING_MARK, 'g')\n\n// Remove the non-spacing-mark from the code, never send a stripped version\n// to the client, as it kills graphical emoticons.\nfunction stripNSB (code) {\n  return code.replace(nonSpacingRegex, '');\n};\n\n// Reversed hash table, where as emojiByName contains a { heart: '❤' }\n// dictionary emojiByCode contains { ❤: 'heart' }. The codes are normalized\n// to the text version.\nvar emojiByCode = Object.keys(emojiByName).reduce(function(h,k) {\n  h[stripNSB(emojiByName[k])] = k;\n  return h;\n}, {});\n\n/**\n * Emoji namespace\n */\nvar Emoji = {\n  emoji: emojiByName,\n};\n\n/**\n * get emoji code from name. return emoji code back if code is passed in.\n * @param  {string} emoji\n * @return {string}\n */\nEmoji._get = function _get (emoji) {\n  if (emojiByCode[stripNSB(emoji)]) {\n    return emoji;\n  } else if (emojiByName.hasOwnProperty(emoji)) {\n    return emojiByName[emoji];\n  }\n\n  return ensureColons(emoji);\n};\n\n/**\n * get emoji code from :emoji: string or name\n * @param  {string} emoji\n * @return {string}\n */\nEmoji.get = function get (emoji) {\n  emoji = stripColons(emoji);\n\n  return Emoji._get(emoji);\n};\n\n/**\n * find the emoji by either code or name\n * @param {string} nameOrCode The emoji to find, either `coffee`, `:coffee:` or `☕`;\n * @return {object}\n */\nEmoji.find = function find (nameOrCode) {\n  return Emoji.findByName(nameOrCode) || Emoji.findByCode(nameOrCode);\n};\n\n/**\n * find the emoji by name\n * @param {string} name The emoji to find either `coffee` or `:coffee:`;\n * @return {object}\n */\nEmoji.findByName = function findByName (name) {\n  var stripped = stripColons(name);\n  var emoji = emojiByName[stripped];\n\n  return emoji ? ({ emoji: emoji, key: stripped }) : undefined;\n};\n\n/**\n * find the emoji by code (emoji)\n * @param {string} code The emoji to find; for example `☕` or `☔`\n * @return {object}\n */\nEmoji.findByCode = function findByCode (code) {\n  var stripped = stripNSB(code);\n  var name = emojiByCode[stripped];\n\n  // lookup emoji to ensure the Variant Form is returned\n  return name ? ({ emoji: emojiByName[name], key: name }) : undefined;\n};\n\n\n/**\n * Check if an emoji is known by this library\n * @param {string} nameOrCode The emoji to validate, either `coffee`, `:coffee:` or `☕`;\n * @return {object}\n */\nEmoji.hasEmoji = function hasEmoji (nameOrCode) {\n  return Emoji.hasEmojiByName(nameOrCode) || Emoji.hasEmojiByCode(nameOrCode);\n};\n\n/**\n * Check if an emoji with given name is known by this library\n * @param {string} name The emoji to validate either `coffee` or `:coffee:`;\n * @return {object}\n */\nEmoji.hasEmojiByName = function hasEmojiByName (name) {\n  var result = Emoji.findByName(name);\n  return !!result && result.key === stripColons(name);\n};\n\n/**\n * Check if a given emoji is known by this library\n * @param {string} code The emoji to validate; for example `☕` or `☔`\n * @return {object}\n */\nEmoji.hasEmojiByCode = function hasEmojiByCode (code) {\n  var result = Emoji.findByCode(code);\n  return !!result && stripNSB(result.emoji) === stripNSB(code);\n};\n\n/**\n * get emoji name from code\n * @param  {string} emoji\n * @param  {boolean} includeColons should the result include the ::\n * @return {string}\n */\nEmoji.which = function which (emoji_code, includeColons) {\n  var code = stripNSB(emoji_code);\n  var word = emojiByCode[code];\n\n  return includeColons ? wrapColons(word) : word;\n};\n\n/**\n * emojify a string (replace :emoji: with an emoji)\n * @param  {string} str\n * @param  {function} on_missing (gets emoji name without :: and returns a proper emoji if no emoji was found)\n * @param  {function} format (wrap the returned emoji in a custom element)\n * @return {string}\n */\nEmoji.emojify = function emojify (str, on_missing, format) {\n  if (!str) return '';\n\n  return str.split(emojiNameRegex) // parse emoji via regex\n            .map(function parseEmoji(s, i) {\n              // every second element is an emoji, e.g. \"test :fast_forward:\" -> [ \"test \", \"fast_forward\" ]\n              if (i % 2 === 0) return s;\n              var emoji = Emoji._get(s);\n              var isMissing = emoji.indexOf(':') > -1;\n\n              if (isMissing && typeof on_missing === 'function') {\n                return on_missing(s);\n              }\n\n              if (!isMissing && typeof format === 'function') {\n                return format(emoji, s);\n              }\n\n              return emoji;\n            })\n            .join('') // convert back to string\n  ;\n};\n\n/**\n * return a random emoji\n * @return {string}\n */\nEmoji.random = function random () {\n  var emojiKeys = Object.keys(emojiByName);\n  var randomIndex = Math.floor(Math.random() * emojiKeys.length);\n  var key = emojiKeys[randomIndex];\n  var emoji = Emoji._get(key);\n  return { key: key, emoji: emoji };\n}\n\n/**\n *  return an collection of potential emoji matches\n *  @param {string} str\n *  @return {Array.<Object>}\n */\nEmoji.search = function search (str) {\n  var emojiKeys = Object.keys(emojiByName);\n  var matcher = stripColons(str)\n  var matchingKeys = emojiKeys.filter(function(key) {\n    return key.toString().indexOf(matcher) === 0;\n  });\n  return matchingKeys.map(function(key) {\n    return {\n      key: key,\n      emoji: Emoji._get(key),\n    };\n  });\n}\n\n/**\n * unemojify a string (replace emoji with :emoji:)\n * @param  {string} str\n * @return {string}\n */\nEmoji.unemojify = function unemojify (str) {\n  if (!str) return '';\n  var words = toArray(str);\n\n  return words.map(function(word) {\n    return Emoji.which(word, true) || word;\n  }).join('');\n};\n\n/**\n * replace emojis with replacement value\n * @param {string} str\n * @param {function|string} the string or callback function to replace the emoji with\n * @param {boolean} should trailing whitespaces be cleaned? Defaults false\n * @return {string}\n */\nEmoji.replace = function replace (str, replacement, cleanSpaces) {\n  if (!str) return '';\n\n  var replace = typeof replacement === 'function' ? replacement : function() { return replacement; };\n  var words = toArray(str);\n\n  var replaced = words.map(function(word, idx) {\n    var emoji = Emoji.findByCode(word);\n\n    if (emoji && cleanSpaces && words[idx + 1] === ' ') {\n      words[idx + 1] = '';\n    }\n\n    return emoji ? replace(emoji) : word;\n  }).join('');\n\n  return cleanSpaces ? replaced.replace(trimSpaceRegex, '') : replaced;\n};\n\n\n/**\n * remove all emojis from a string\n * @param {string} str\n * @return {string}\n */\nEmoji.strip = function strip (str) {\n  return Emoji.replace(str, '', true);\n};\n\nmodule.exports = Emoji;\n","module.exports = require('./lib/emoji');","import { StoryObj } from \"@storybook/react\";\nimport { useMemo, useRef, useState } from \"react\";\nimport { createPortal } from \"react-dom\";\nimport { RichTextarea } from \"../../src\";\nimport emoji from \"node-emoji\";\nimport { RichTextareaHandle } from \"../../src\";\n\nexport default {\n  component: RichTextarea,\n};\n\nconst style = { width: \"400px\", height: \"300px\" };\n\nconst MAX_CHARS = 8;\nconst MENTION_REG = /:([\\-+\\w]*)$/;\n\nconst Menu = ({\n  chars,\n  index,\n  top,\n  left,\n  complete,\n}: {\n  chars: emoji.Emoji[];\n  index: number;\n  top: number;\n  left: number;\n  complete: (index: number) => void;\n}) => {\n  return (\n    <div\n      style={{\n        position: \"fixed\",\n        top: top,\n        left: left,\n        fontSize: \"16px\",\n        border: \"solid 1px gray\",\n        borderRadius: \"3px\",\n        background: \"white\",\n        cursor: \"pointer\",\n      }}\n    >\n      {chars.map((c, i) => (\n        <div\n          key={c.key}\n          style={{\n            padding: \"4px\",\n            ...(index === i && {\n              color: \"white\",\n              background: \"#2A6AD3\",\n            }),\n          }}\n          onMouseDown={(e) => {\n            e.preventDefault();\n            complete(i);\n          }}\n        >\n          {`${c.emoji} ${c.key}`}\n        </div>\n      ))}\n    </div>\n  );\n};\n\nexport const Emoji: StoryObj = {\n  render: () => {\n    const ref = useRef<RichTextareaHandle>(null);\n    const [text, setText] = useState(`Type : to show suggestions 💪\\n\\n`);\n    const [pos, setPos] = useState<{\n      top: number;\n      left: number;\n      caret: number;\n    } | null>(null);\n    const [index, setIndex] = useState<number>(0);\n\n    const targetText = pos ? text.slice(0, pos.caret) : text;\n    const match = pos && targetText.match(MENTION_REG);\n    const name = match?.[1] ?? \"\";\n    const chars = useMemo(() => emoji.search(name).slice(0, MAX_CHARS), [name]);\n    const complete = (i: number) => {\n      if (!ref.current || !pos) return;\n      const selected = chars[i].emoji;\n      ref.current.setRangeText(\n        `${selected} `,\n        pos.caret - name.length - 1,\n        pos.caret,\n        \"end\"\n      );\n      setPos(null);\n      setIndex(0);\n    };\n\n    return (\n      <div>\n        <RichTextarea\n          ref={ref}\n          style={style}\n          onChange={(e) => setText(e.target.value)}\n          value={text}\n          onKeyDown={(e) => {\n            if (!pos || !chars.length) return;\n            switch (e.code) {\n              case \"ArrowUp\":\n                e.preventDefault();\n                const nextIndex = index <= 0 ? chars.length - 1 : index - 1;\n                setIndex(nextIndex);\n                break;\n              case \"ArrowDown\":\n                e.preventDefault();\n                const prevIndex = index >= chars.length - 1 ? 0 : index + 1;\n                setIndex(prevIndex);\n                break;\n              case \"Enter\":\n                e.preventDefault();\n                complete(index);\n                break;\n              case \"Escape\":\n                e.preventDefault();\n                setPos(null);\n                setIndex(0);\n                break;\n              default:\n                break;\n            }\n          }}\n          onSelectionChange={(r) => {\n            if (\n              r.focused &&\n              MENTION_REG.test(text.slice(0, r.selectionStart))\n            ) {\n              setPos({\n                top: r.top + r.height,\n                left: r.left,\n                caret: r.selectionStart,\n              });\n              setIndex(0);\n            } else {\n              setPos(null);\n              setIndex(0);\n            }\n          }}\n        />\n        {pos &&\n          createPortal(\n            <Menu\n              top={pos.top}\n              left={pos.left}\n              chars={chars}\n              index={index}\n              complete={complete}\n            />,\n            document.body\n          )}\n      </div>\n    );\n  },\n};\n"],"names":["iteratorToArray","iterator","data","result","_iteratorToArray","arrayMap","require$$0","baseValues","object","props","key","_baseValues","keys","require$$1","values","values_1","Symbol","copyArray","getTag","require$$2","isArrayLike","require$$3","isString","require$$4","require$$5","mapToArray","require$$6","setToArray","require$$7","stringToArray","require$$8","require$$9","mapTag","setTag","symIterator","toArray","value","tag","func","toArray_1","emojiByName","emojiNameRegex","trimSpaceRegex","stripColons","str","colonIndex","wrapColons","ensureColons","NON_SPACING_MARK","nonSpacingRegex","stripNSB","code","emojiByCode","h","k","Emoji","emoji","nameOrCode","name","stripped","emoji_code","includeColons","word","on_missing","format","s","i","isMissing","emojiKeys","randomIndex","matcher","matchingKeys","words","replacement","cleanSpaces","replace","replaced","idx","module","Emoji_stories","component","RichTextarea","style","width","height","MAX_CHARS","MENTION_REG","Menu","chars","index","top","left","complete","position","fontSize","border","borderRadius","background","cursor","map","c","padding","color","e","preventDefault","render","ref","useRef","text","setText","useState","pos","setPos","setIndex","targetText","slice","caret","match","useMemo","search","current","selected","setRangeText","length","_jsx","target","nextIndex","prevIndex","r","focused","test","selectionStart","createPortal","document","body"],"mappings":"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"}