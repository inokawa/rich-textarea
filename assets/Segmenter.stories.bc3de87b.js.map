{"version":3,"file":"Segmenter.stories.bc3de87b.js","sources":["../../stories/examples/Segmenter.stories.tsx"],"sourcesContent":["import { StoryObj } from \"@storybook/react\";\nimport { useState } from \"react\";\nimport { RichTextarea } from \"../../src\";\n\nexport default {\n  component: RichTextarea,\n};\n\nconst style: React.CSSProperties = {\n  width: \"300px\",\n  height: \"200px\",\n};\n\nexport const Segmenter: StoryObj = {\n  render: () => {\n    const [text, setText] = useState(\n      \"すもももももももものうち。\\n\\n吾輩 （ わがはい ） は猫である。名前はまだ無い。\"\n    );\n    const [locale, setLocale] = useState(\"ja\");\n    const [granularity, setGranularity] = useState<string>(\"word\");\n\n    const hasSegmenter = !!(Intl as any)?.Segmenter;\n    return (\n      <div>\n        {!hasSegmenter && (\n          <div>{\"Intl.Segmenter is not supported in this browser.\"}</div>\n        )}\n        <div>\n          <input value={locale} onChange={(e) => setLocale(e.target.value)} />\n          <select\n            value={granularity}\n            onChange={(e) => setGranularity(e.target.value)}\n          >\n            <option value={\"grapheme\"}>grapheme</option>\n            <option value={\"word\"}>word</option>\n            <option value={\"sentence\"}>sentence</option>\n          </select>\n        </div>\n        <RichTextarea\n          style={style}\n          onChange={(e) => setText(e.target.value)}\n          value={text}\n        >\n          {(v) => {\n            if (!hasSegmenter) return v;\n\n            try {\n              const segmenter = new (Intl as any).Segmenter(locale, {\n                granularity,\n              });\n              const tokens = segmenter.segment(v);\n              const nodes: React.ReactElement[] = [];\n              for (const { segment, index, isWordLike } of tokens) {\n                nodes.push(\n                  <span\n                    key={index}\n                    style={{\n                      background: isWordLike ? \"palegreen\" : undefined,\n                      outline: \"solid 1px green\",\n                    }}\n                  >\n                    {segment}\n                  </span>\n                );\n              }\n              return nodes;\n            } catch (e) {\n              return v;\n            }\n          }}\n        </RichTextarea>\n      </div>\n    );\n  },\n};\n"],"names":["Segmenter_stories","component","RichTextarea","style","width","height","Segmenter","render","text","setText","useState","locale","setLocale","granularity","setGranularity","hasSegmenter","Intl","_jsxs","_jsx","e","target","value","v","tokens","segment","nodes","index","isWordLike","push","background","undefined","outline"],"mappings":"kSAIA,MAAeA,EAAA,CACbC,UAAWC,CACb,EAEMC,EAA6B,CACjCC,MAAO,QACPC,OAAQ,OACV,EAEaC,EAAsB,CACjCC,OAAQ,IAAM,CACZ,KAAM,CAACC,EAAMC,CAAO,EAAIC,mBACtB;AAAA;AAAA,yIAA6C,EAEzC,CAACC,EAAQC,CAAS,EAAIF,mBAAS,IAAI,EACnC,CAACG,EAAaC,CAAc,EAAIJ,mBAAiB,MAAM,EAEvDK,EAAe,CAAC,EAAEC,iBAAcV,WACtC,SACE,MAAA,CAAA,SACG,CAAA,CAACS,KACA,MAAA,CAAA,SAAM,kDAAA,CAAkD,EAE1DE,EAAA,MAAA,CAAA,SACE,CAAAC,EAAA,QAAA,CAAO,MAAOP,EAAQ,SAAWQ,GAAMP,EAAUO,EAAEC,OAAOC,KAAK,CAAA,CAAE,EACjEJ,EAAA,SAAA,CACE,MAAOJ,EACP,SAAWM,GAAML,EAAeK,EAAEC,OAAOC,KAAK,EAAE,SAEhD,CAAAH,EAAA,SAAA,CAAQ,MAAO,WAAW,SAAA,UAAA,CAAA,EAC1BA,EAAA,SAAA,CAAQ,MAAO,OAAO,SAAA,MAAA,CAAA,EACtBA,EAAA,SAAA,CAAQ,MAAO,WAAW,SAAA,UAAA,CAAkB,CAAA,CAAA,CACrC,CAAA,CAAA,CACL,EACNA,EAAChB,EAAY,CACX,MAAAC,EACA,SAAWgB,GAAMV,EAAQU,EAAEC,OAAOC,KAAK,EACvC,MAAOb,EAAK,SAEJc,GAAA,CACN,GAAI,CAACP,EAAqBO,OAAAA,EAEtB,GAAA,CAIIC,MAAAA,EAHY,IAAKP,KAAaV,UAAUK,EAAQ,CACpDE,YAAAA,CAAAA,CACD,EACwBW,QAAQF,CAAC,EAC5BG,EAA8B,CAAA,EACzB,SAAA,CAAED,QAAAA,EAASE,MAAAA,EAAOC,WAAAA,KAAgBJ,EACrCK,EAAAA,OACJ,OAAA,CAEE,MAAO,CACLC,WAAYF,EAAa,YAAcG,OACvCC,QAAS,iBACX,EAAE,SAEDP,CAAAA,EANIE,CAAK,CAOL,EAGJD,OAAAA,QAEAH,OAAAA,CACT,CACF,CAAA,CACa,CAAA,CAAA,CACX,CAEV,CACF"}