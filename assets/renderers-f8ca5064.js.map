{"version":3,"file":"renderers-f8ca5064.js","sources":["../../src/regex.ts","../../src/renderers.tsx"],"sourcesContent":["export const execReg = (reg: RegExp, text: string): RegExpExecArray[] => {\n  const results: RegExpExecArray[] = [];\n  let match = reg.exec(text);\n  while (!!match) {\n    results.push(match);\n    match = reg.exec(text);\n  }\n  return results;\n};\n","import { execReg } from \"./regex\";\nimport type { Renderer } from \"./types\";\n\nexport type StyleOrRender =\n  | React.CSSProperties\n  | ((props: {\n      children: React.ReactNode;\n      value: string;\n      key?: string | undefined;\n    }) => React.ReactNode);\n\n/**\n * An utility to create renderer function with regex.\n *\n * The priority is descending order.\n */\nexport const createRegexRenderer = (\n  matchers: [RegExp, StyleOrRender][]\n): Renderer => {\n  const allStyles = matchers.map(([, style]) => style);\n\n  return (value) => {\n    const [indexSet, startToStyleMap, endToStyleMap] = matchers.reduce(\n      (acc, [matcher, style]) => {\n        execReg(matcher, value).forEach((m) => {\n          const start = m.index;\n          const end = m.index + m[0]!.length;\n\n          acc[0].add(start).add(end);\n          let startStyles = acc[1].get(start);\n          let endStyles = acc[2].get(end);\n          if (!startStyles) {\n            acc[1].set(start, (startStyles = []));\n          }\n          if (!endStyles) {\n            acc[2].set(end, (endStyles = []));\n          }\n          startStyles.push(style);\n          endStyles.push(style);\n        });\n        return acc;\n      },\n      [\n        new Set<number>(),\n        new Map<number, StyleOrRender[]>(),\n        new Map<number, StyleOrRender[]>(),\n      ] as const\n    );\n    const indexes = Array.from(indexSet);\n    indexes.sort((a, b) => {\n      return a - b;\n    });\n\n    let prevEnd = 0;\n    const activeStyles: StyleOrRender[] = [];\n    const res: React.ReactNode[] = [];\n    for (let i = 0; i < indexes.length; i++) {\n      const start = indexes[i]!;\n      const end = indexes[i + 1] ?? value.length;\n      if (start === end) continue;\n      const headValue = value.slice(prevEnd, start);\n      if (headValue) {\n        res.push(headValue);\n      }\n      const startStyles = startToStyleMap.get(start);\n      const endStyles = endToStyleMap.get(end);\n      if (startStyles) {\n        startStyles.forEach((s) => {\n          activeStyles.push(s);\n        });\n        activeStyles.sort((a, b) => {\n          return allStyles.indexOf(b) - allStyles.indexOf(a);\n        });\n      }\n\n      const v = value.slice(start, end);\n      res.push(\n        activeStyles.reduceRight((acc, styleOrRender, j) => {\n          const key = j === 0 ? String(start) : undefined;\n          if (typeof styleOrRender === \"function\") {\n            return styleOrRender({ children: acc, value: v, key });\n          } else {\n            return (\n              <span key={key} style={styleOrRender}>\n                {acc}\n              </span>\n            );\n          }\n        }, v as React.ReactNode)\n      );\n\n      if (endStyles) {\n        endStyles.forEach((s) => {\n          activeStyles.splice(activeStyles.indexOf(s), 1);\n        });\n      }\n\n      prevEnd = end;\n    }\n\n    const tailValue = value.slice(prevEnd);\n    if (tailValue) {\n      res.push(tailValue);\n    }\n\n    return res;\n  };\n};\n"],"names":["execReg","reg","text","results","match","createRegexRenderer","matchers","allStyles","style","value","indexSet","startToStyleMap","endToStyleMap","acc","matcher","m","start","end","startStyles","endStyles","indexes","a","b","prevEnd","activeStyles","res","i","headValue","s","v","styleOrRender","j","key","jsx","tailValue"],"mappings":"4CAAa,MAAAA,EAAU,CAACC,EAAaC,IAAoC,CACvE,MAAMC,EAA6B,CAAA,EAC/B,IAAAC,EAAQH,EAAI,KAAKC,CAAI,EAClB,KAAEE,GACPD,EAAQ,KAAKC,CAAK,EACVA,EAAAH,EAAI,KAAKC,CAAI,EAEhB,OAAAC,CACT,ECQOE,EAAAC,GAAA,CAGL,MAAAC,EAAAD,EAAA,IAAA,CAAA,CAAA,CAAAE,CAAA,IAAAA,CAAA,EAEA,OAAAC,GAAA,CACE,KAAA,CAAAC,EAAAC,EAAAC,CAAA,EAAAN,EAAA,OAA4D,CAAAO,EAAA,CAAAC,EAAAN,CAAA,KAExDR,EAAAc,EAAAL,CAAA,EAAA,QAAAM,GAAA,CACE,MAAAC,EAAAD,EAAA,MACAE,EAAAF,EAAA,MAAAA,EAAA,CAAA,EAAA,OAEAF,EAAA,CAAA,EAAA,IAAAG,CAAA,EAAA,IAAAC,CAAA,EACA,IAAAC,EAAAL,EAAA,CAAA,EAAA,IAAAG,CAAA,EACAG,EAAAN,EAAA,CAAA,EAAA,IAAAI,CAAA,EACAC,GACEL,EAAA,CAAA,EAAA,IAAAG,EAAAE,EAAA,CAAA,CAAA,EAEFC,GACEN,EAAA,CAAA,EAAA,IAAAI,EAAAE,EAAA,CAAA,CAAA,EAEFD,EAAA,KAAAV,CAAA,EACAW,EAAA,KAAAX,CAAA,CAAoB,CAAA,EAEtBK,GACF,CACA,IAAA,IACkB,IAAA,IACiB,IAAA,GACA,CACnC,EAEFO,EAAA,MAAA,KAAAV,CAAA,EACAU,EAAA,KAAA,CAAAC,EAAAC,IACED,EAAAC,CAAW,EAGb,IAAAC,EAAA,EACA,MAAAC,EAAA,CAAA,EACAC,EAAA,CAAA,EACA,QAAAC,EAAA,EAAAA,EAAAN,EAAA,OAAAM,IAAA,CACE,MAAAV,EAAAI,EAAAM,CAAA,EACAT,EAAAG,EAAAM,EAAA,CAAA,GAAAjB,EAAA,OACA,GAAAO,IAAAC,EAAmB,SACnB,MAAAU,EAAAlB,EAAA,MAAAc,EAAAP,CAAA,EACAW,GACEF,EAAA,KAAAE,CAAA,EAEF,MAAAT,EAAAP,EAAA,IAAAK,CAAA,EACAG,EAAAP,EAAA,IAAAK,CAAA,EACAC,IACEA,EAAA,QAAAU,GAAA,CACEJ,EAAA,KAAAI,CAAA,CAAmB,CAAA,EAErBJ,EAAA,KAAA,CAAAH,EAAAC,IACEf,EAAA,QAAAe,CAAA,EAAAf,EAAA,QAAAc,CAAA,CAAiD,GAIrD,MAAAQ,EAAApB,EAAA,MAAAO,EAAAC,CAAA,EACAQ,EAAA,KAAID,EAAA,YAAA,CAAAX,EAAAiB,EAAAC,IAAA,CAEA,MAAAC,EAAAD,IAAA,EAAA,OAAAf,CAAA,EAAA,OACA,OAAA,OAAAc,GAAA,WACEA,EAAA,CAAA,SAAAjB,EAAA,MAAAgB,EAAA,IAAAG,CAAA,CAAA,EAEAC,EAAA,OAAA,CAAA,MAAAH,EAAA,SAAAjB,GAAAmB,CAAA,CAKF,EAAAH,CAAA,CACqB,EAGzBV,GACEA,EAAA,QAAAS,GAAA,CACEJ,EAAA,OAAAA,EAAA,QAAAI,CAAA,EAAA,CAAA,CAA8C,CAAA,EAIlDL,EAAAN,EAGF,MAAAiB,EAAAzB,EAAA,MAAAc,CAAA,EACA,OAAAW,GACET,EAAA,KAAAS,CAAA,EAGFT,CAAO,CAEX;;"}