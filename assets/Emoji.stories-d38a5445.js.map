{"version":3,"file":"Emoji.stories-d38a5445.js","sources":["../../node_modules/lodash/_iteratorToArray.js","../../node_modules/lodash/_asciiToArray.js","../../node_modules/lodash/_hasUnicode.js","../../node_modules/lodash/_unicodeToArray.js","../../node_modules/lodash/_stringToArray.js","../../node_modules/lodash/_baseValues.js","../../node_modules/lodash/values.js","../../node_modules/lodash/toArray.js","../../node_modules/node-emoji/lib/emoji.js","../../node_modules/node-emoji/index.js"],"sourcesContent":["/**\n * Converts `iterator` to an array.\n *\n * @private\n * @param {Object} iterator The iterator to convert.\n * @returns {Array} Returns the converted array.\n */\nfunction iteratorToArray(iterator) {\n  var data,\n      result = [];\n\n  while (!(data = iterator.next()).done) {\n    result.push(data.value);\n  }\n  return result;\n}\n\nmodule.exports = iteratorToArray;\n","/**\n * Converts an ASCII `string` to an array.\n *\n * @private\n * @param {string} string The string to convert.\n * @returns {Array} Returns the converted array.\n */\nfunction asciiToArray(string) {\n  return string.split('');\n}\n\nmodule.exports = asciiToArray;\n","/** Used to compose unicode character classes. */\nvar rsAstralRange = '\\\\ud800-\\\\udfff',\n    rsComboMarksRange = '\\\\u0300-\\\\u036f',\n    reComboHalfMarksRange = '\\\\ufe20-\\\\ufe2f',\n    rsComboSymbolsRange = '\\\\u20d0-\\\\u20ff',\n    rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange,\n    rsVarRange = '\\\\ufe0e\\\\ufe0f';\n\n/** Used to compose unicode capture groups. */\nvar rsZWJ = '\\\\u200d';\n\n/** Used to detect strings with [zero-width joiners or code points from the astral planes](http://eev.ee/blog/2015/09/12/dark-corners-of-unicode/). */\nvar reHasUnicode = RegExp('[' + rsZWJ + rsAstralRange  + rsComboRange + rsVarRange + ']');\n\n/**\n * Checks if `string` contains Unicode symbols.\n *\n * @private\n * @param {string} string The string to inspect.\n * @returns {boolean} Returns `true` if a symbol is found, else `false`.\n */\nfunction hasUnicode(string) {\n  return reHasUnicode.test(string);\n}\n\nmodule.exports = hasUnicode;\n","/** Used to compose unicode character classes. */\nvar rsAstralRange = '\\\\ud800-\\\\udfff',\n    rsComboMarksRange = '\\\\u0300-\\\\u036f',\n    reComboHalfMarksRange = '\\\\ufe20-\\\\ufe2f',\n    rsComboSymbolsRange = '\\\\u20d0-\\\\u20ff',\n    rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange,\n    rsVarRange = '\\\\ufe0e\\\\ufe0f';\n\n/** Used to compose unicode capture groups. */\nvar rsAstral = '[' + rsAstralRange + ']',\n    rsCombo = '[' + rsComboRange + ']',\n    rsFitz = '\\\\ud83c[\\\\udffb-\\\\udfff]',\n    rsModifier = '(?:' + rsCombo + '|' + rsFitz + ')',\n    rsNonAstral = '[^' + rsAstralRange + ']',\n    rsRegional = '(?:\\\\ud83c[\\\\udde6-\\\\uddff]){2}',\n    rsSurrPair = '[\\\\ud800-\\\\udbff][\\\\udc00-\\\\udfff]',\n    rsZWJ = '\\\\u200d';\n\n/** Used to compose unicode regexes. */\nvar reOptMod = rsModifier + '?',\n    rsOptVar = '[' + rsVarRange + ']?',\n    rsOptJoin = '(?:' + rsZWJ + '(?:' + [rsNonAstral, rsRegional, rsSurrPair].join('|') + ')' + rsOptVar + reOptMod + ')*',\n    rsSeq = rsOptVar + reOptMod + rsOptJoin,\n    rsSymbol = '(?:' + [rsNonAstral + rsCombo + '?', rsCombo, rsRegional, rsSurrPair, rsAstral].join('|') + ')';\n\n/** Used to match [string symbols](https://mathiasbynens.be/notes/javascript-unicode). */\nvar reUnicode = RegExp(rsFitz + '(?=' + rsFitz + ')|' + rsSymbol + rsSeq, 'g');\n\n/**\n * Converts a Unicode `string` to an array.\n *\n * @private\n * @param {string} string The string to convert.\n * @returns {Array} Returns the converted array.\n */\nfunction unicodeToArray(string) {\n  return string.match(reUnicode) || [];\n}\n\nmodule.exports = unicodeToArray;\n","var asciiToArray = require('./_asciiToArray'),\n    hasUnicode = require('./_hasUnicode'),\n    unicodeToArray = require('./_unicodeToArray');\n\n/**\n * Converts `string` to an array.\n *\n * @private\n * @param {string} string The string to convert.\n * @returns {Array} Returns the converted array.\n */\nfunction stringToArray(string) {\n  return hasUnicode(string)\n    ? unicodeToArray(string)\n    : asciiToArray(string);\n}\n\nmodule.exports = stringToArray;\n","var arrayMap = require('./_arrayMap');\n\n/**\n * The base implementation of `_.values` and `_.valuesIn` which creates an\n * array of `object` property values corresponding to the property names\n * of `props`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {Array} props The property names to get values for.\n * @returns {Object} Returns the array of property values.\n */\nfunction baseValues(object, props) {\n  return arrayMap(props, function(key) {\n    return object[key];\n  });\n}\n\nmodule.exports = baseValues;\n","var baseValues = require('./_baseValues'),\n    keys = require('./keys');\n\n/**\n * Creates an array of the own enumerable string keyed property values of `object`.\n *\n * **Note:** Non-object values are coerced to objects.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Object\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property values.\n * @example\n *\n * function Foo() {\n *   this.a = 1;\n *   this.b = 2;\n * }\n *\n * Foo.prototype.c = 3;\n *\n * _.values(new Foo);\n * // => [1, 2] (iteration order is not guaranteed)\n *\n * _.values('hi');\n * // => ['h', 'i']\n */\nfunction values(object) {\n  return object == null ? [] : baseValues(object, keys(object));\n}\n\nmodule.exports = values;\n","var Symbol = require('./_Symbol'),\n    copyArray = require('./_copyArray'),\n    getTag = require('./_getTag'),\n    isArrayLike = require('./isArrayLike'),\n    isString = require('./isString'),\n    iteratorToArray = require('./_iteratorToArray'),\n    mapToArray = require('./_mapToArray'),\n    setToArray = require('./_setToArray'),\n    stringToArray = require('./_stringToArray'),\n    values = require('./values');\n\n/** `Object#toString` result references. */\nvar mapTag = '[object Map]',\n    setTag = '[object Set]';\n\n/** Built-in value references. */\nvar symIterator = Symbol ? Symbol.iterator : undefined;\n\n/**\n * Converts `value` to an array.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Lang\n * @param {*} value The value to convert.\n * @returns {Array} Returns the converted array.\n * @example\n *\n * _.toArray({ 'a': 1, 'b': 2 });\n * // => [1, 2]\n *\n * _.toArray('abc');\n * // => ['a', 'b', 'c']\n *\n * _.toArray(1);\n * // => []\n *\n * _.toArray(null);\n * // => []\n */\nfunction toArray(value) {\n  if (!value) {\n    return [];\n  }\n  if (isArrayLike(value)) {\n    return isString(value) ? stringToArray(value) : copyArray(value);\n  }\n  if (symIterator && value[symIterator]) {\n    return iteratorToArray(value[symIterator]());\n  }\n  var tag = getTag(value),\n      func = tag == mapTag ? mapToArray : (tag == setTag ? setToArray : values);\n\n  return func(value);\n}\n\nmodule.exports = toArray;\n","/*jslint node: true*/\nvar toArray = require('lodash/toArray');\nvar emojiByName = require('./emoji.json');\n\n\"use strict\";\n\n/**\n * regex to parse emoji in a string - finds emoji, e.g. :coffee:\n */\nvar emojiNameRegex = /:([a-zA-Z0-9_\\-\\+]+):/g;\n\n/**\n * regex to trim whitespace\n * use instead of String.prototype.trim() for IE8 support\n */\nvar trimSpaceRegex = /^[\\s\\uFEFF\\xA0]+|[\\s\\uFEFF\\xA0]+$/g;\n\n/**\n * Removes colons on either side\n * of the string if present\n * @param  {string} str\n * @return {string}\n */\nfunction stripColons (str) {\n  var colonIndex = str.indexOf(':');\n  if (colonIndex > -1) {\n    // :emoji: (http://www.emoji-cheat-sheet.com/)\n    if (colonIndex === str.length - 1) {\n      str = str.substring(0, colonIndex);\n      return stripColons(str);\n    } else {\n      str = str.substr(colonIndex + 1);\n      return stripColons(str);\n    }\n  }\n\n  return str;\n}\n\n/**\n * Adds colons to either side\n * of the string\n * @param {string} str\n * @return {string}\n */\nfunction wrapColons (str) {\n  return (typeof str === 'string' && str.length > 0) ? ':' + str + ':' : str;\n}\n\n/**\n * Ensure that the word is wrapped in colons\n * by only adding them, if they are not there.\n * @param {string} str\n * @return {string}\n */\nfunction ensureColons (str) {\n  return (typeof str === 'string' && str[0] !== ':') ? wrapColons(str) : str;\n}\n\n// Non spacing mark, some emoticons have them. It's the 'Variant Form',\n// which provides more information so that emoticons can be rendered as\n// more colorful graphics. FE0E is a unicode text version, where as FE0F\n// should be rendered as a graphical version. The code gracefully degrades.\nvar NON_SPACING_MARK = String.fromCharCode(65039); // 65039 - '️' - 0xFE0F;\nvar nonSpacingRegex = new RegExp(NON_SPACING_MARK, 'g')\n\n// Remove the non-spacing-mark from the code, never send a stripped version\n// to the client, as it kills graphical emoticons.\nfunction stripNSB (code) {\n  return code.replace(nonSpacingRegex, '');\n};\n\n// Reversed hash table, where as emojiByName contains a { heart: '❤' }\n// dictionary emojiByCode contains { ❤: 'heart' }. The codes are normalized\n// to the text version.\nvar emojiByCode = Object.keys(emojiByName).reduce(function(h,k) {\n  h[stripNSB(emojiByName[k])] = k;\n  return h;\n}, {});\n\n/**\n * Emoji namespace\n */\nvar Emoji = {\n  emoji: emojiByName,\n};\n\n/**\n * get emoji code from name. return emoji code back if code is passed in.\n * @param  {string} emoji\n * @return {string}\n */\nEmoji._get = function _get (emoji) {\n  if (emojiByCode[stripNSB(emoji)]) {\n    return emoji;\n  } else if (emojiByName.hasOwnProperty(emoji)) {\n    return emojiByName[emoji];\n  }\n\n  return ensureColons(emoji);\n};\n\n/**\n * get emoji code from :emoji: string or name\n * @param  {string} emoji\n * @return {string}\n */\nEmoji.get = function get (emoji) {\n  emoji = stripColons(emoji);\n\n  return Emoji._get(emoji);\n};\n\n/**\n * find the emoji by either code or name\n * @param {string} nameOrCode The emoji to find, either `coffee`, `:coffee:` or `☕`;\n * @return {object}\n */\nEmoji.find = function find (nameOrCode) {\n  return Emoji.findByName(nameOrCode) || Emoji.findByCode(nameOrCode);\n};\n\n/**\n * find the emoji by name\n * @param {string} name The emoji to find either `coffee` or `:coffee:`;\n * @return {object}\n */\nEmoji.findByName = function findByName (name) {\n  var stripped = stripColons(name);\n  var emoji = emojiByName[stripped];\n\n  return emoji ? ({ emoji: emoji, key: stripped }) : undefined;\n};\n\n/**\n * find the emoji by code (emoji)\n * @param {string} code The emoji to find; for example `☕` or `☔`\n * @return {object}\n */\nEmoji.findByCode = function findByCode (code) {\n  var stripped = stripNSB(code);\n  var name = emojiByCode[stripped];\n\n  // lookup emoji to ensure the Variant Form is returned\n  return name ? ({ emoji: emojiByName[name], key: name }) : undefined;\n};\n\n\n/**\n * Check if an emoji is known by this library\n * @param {string} nameOrCode The emoji to validate, either `coffee`, `:coffee:` or `☕`;\n * @return {object}\n */\nEmoji.hasEmoji = function hasEmoji (nameOrCode) {\n  return Emoji.hasEmojiByName(nameOrCode) || Emoji.hasEmojiByCode(nameOrCode);\n};\n\n/**\n * Check if an emoji with given name is known by this library\n * @param {string} name The emoji to validate either `coffee` or `:coffee:`;\n * @return {object}\n */\nEmoji.hasEmojiByName = function hasEmojiByName (name) {\n  var result = Emoji.findByName(name);\n  return !!result && result.key === stripColons(name);\n};\n\n/**\n * Check if a given emoji is known by this library\n * @param {string} code The emoji to validate; for example `☕` or `☔`\n * @return {object}\n */\nEmoji.hasEmojiByCode = function hasEmojiByCode (code) {\n  var result = Emoji.findByCode(code);\n  return !!result && stripNSB(result.emoji) === stripNSB(code);\n};\n\n/**\n * get emoji name from code\n * @param  {string} emoji\n * @param  {boolean} includeColons should the result include the ::\n * @return {string}\n */\nEmoji.which = function which (emoji_code, includeColons) {\n  var code = stripNSB(emoji_code);\n  var word = emojiByCode[code];\n\n  return includeColons ? wrapColons(word) : word;\n};\n\n/**\n * emojify a string (replace :emoji: with an emoji)\n * @param  {string} str\n * @param  {function} on_missing (gets emoji name without :: and returns a proper emoji if no emoji was found)\n * @param  {function} format (wrap the returned emoji in a custom element)\n * @return {string}\n */\nEmoji.emojify = function emojify (str, on_missing, format) {\n  if (!str) return '';\n\n  return str.split(emojiNameRegex) // parse emoji via regex\n            .map(function parseEmoji(s, i) {\n              // every second element is an emoji, e.g. \"test :fast_forward:\" -> [ \"test \", \"fast_forward\" ]\n              if (i % 2 === 0) return s;\n              var emoji = Emoji._get(s);\n              var isMissing = emoji.indexOf(':') > -1;\n\n              if (isMissing && typeof on_missing === 'function') {\n                return on_missing(s);\n              }\n\n              if (!isMissing && typeof format === 'function') {\n                return format(emoji, s);\n              }\n\n              return emoji;\n            })\n            .join('') // convert back to string\n  ;\n};\n\n/**\n * return a random emoji\n * @return {string}\n */\nEmoji.random = function random () {\n  var emojiKeys = Object.keys(emojiByName);\n  var randomIndex = Math.floor(Math.random() * emojiKeys.length);\n  var key = emojiKeys[randomIndex];\n  var emoji = Emoji._get(key);\n  return { key: key, emoji: emoji };\n}\n\n/**\n *  return an collection of potential emoji matches\n *  @param {string} str\n *  @return {Array.<Object>}\n */\nEmoji.search = function search (str) {\n  var emojiKeys = Object.keys(emojiByName);\n  var matcher = stripColons(str)\n  var matchingKeys = emojiKeys.filter(function(key) {\n    return key.toString().indexOf(matcher) === 0;\n  });\n  return matchingKeys.map(function(key) {\n    return {\n      key: key,\n      emoji: Emoji._get(key),\n    };\n  });\n}\n\n/**\n * unemojify a string (replace emoji with :emoji:)\n * @param  {string} str\n * @return {string}\n */\nEmoji.unemojify = function unemojify (str) {\n  if (!str) return '';\n  var words = toArray(str);\n\n  return words.map(function(word) {\n    return Emoji.which(word, true) || word;\n  }).join('');\n};\n\n/**\n * replace emojis with replacement value\n * @param {string} str\n * @param {function|string} the string or callback function to replace the emoji with\n * @param {boolean} should trailing whitespaces be cleaned? Defaults false\n * @return {string}\n */\nEmoji.replace = function replace (str, replacement, cleanSpaces) {\n  if (!str) return '';\n\n  var replace = typeof replacement === 'function' ? replacement : function() { return replacement; };\n  var words = toArray(str);\n\n  var replaced = words.map(function(word, idx) {\n    var emoji = Emoji.findByCode(word);\n\n    if (emoji && cleanSpaces && words[idx + 1] === ' ') {\n      words[idx + 1] = '';\n    }\n\n    return emoji ? replace(emoji) : word;\n  }).join('');\n\n  return cleanSpaces ? replaced.replace(trimSpaceRegex, '') : replaced;\n};\n\n\n/**\n * remove all emojis from a string\n * @param {string} str\n * @return {string}\n */\nEmoji.strip = function strip (str) {\n  return Emoji.replace(str, '', true);\n};\n\nmodule.exports = Emoji;\n","module.exports = require('./lib/emoji');"],"names":["iteratorToArray","iterator","data","result","_iteratorToArray","asciiToArray","string","_asciiToArray","rsAstralRange","rsComboMarksRange","reComboHalfMarksRange","rsComboSymbolsRange","rsComboRange","rsVarRange","rsZWJ","reHasUnicode","hasUnicode","_hasUnicode","rsAstral","rsCombo","rsFitz","rsModifier","rsNonAstral","rsRegional","rsSurrPair","reOptMod","rsOptVar","rsOptJoin","rsSeq","rsSymbol","reUnicode","unicodeToArray","_unicodeToArray","require$$0","require$$1","require$$2","stringToArray","_stringToArray","arrayMap","baseValues","object","props","key","_baseValues","keys","values","values_1","Symbol","copyArray","getTag","isArrayLike","require$$3","isString","require$$4","require$$5","mapToArray","require$$6","setToArray","require$$7","require$$8","require$$9","mapTag","setTag","symIterator","toArray","value","tag","func","toArray_1","emojiByName","emojiNameRegex","trimSpaceRegex","stripColons","str","colonIndex","wrapColons","ensureColons","NON_SPACING_MARK","nonSpacingRegex","stripNSB","code","emojiByCode","h","k","Emoji","emoji","nameOrCode","name","stripped","emoji_code","includeColons","word","on_missing","format","s","isMissing","emojiKeys","randomIndex","matcher","matchingKeys","words","replacement","cleanSpaces","replace","replaced","idx","module"],"mappings":"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","x_google_ignoreList":[0,1,2,3,4,5,6,7,8,9]}