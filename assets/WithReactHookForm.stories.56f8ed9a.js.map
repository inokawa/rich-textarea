{"version":3,"file":"WithReactHookForm.stories.56f8ed9a.js","sources":["../../node_modules/react-hook-form/dist/index.esm.mjs","../../stories/form-libraries/WithReactHookForm.stories.tsx"],"sourcesContent":["import React from 'react';\n\nvar isCheckBoxInput = (element) => element.type === 'checkbox';\n\nvar isDateObject = (value) => value instanceof Date;\n\nvar isNullOrUndefined = (value) => value == null;\n\nconst isObjectType = (value) => typeof value === 'object';\r\nvar isObject = (value) => !isNullOrUndefined(value) &&\r\n    !Array.isArray(value) &&\r\n    isObjectType(value) &&\r\n    !isDateObject(value);\n\nvar getEventValue = (event) => isObject(event) && event.target\r\n    ? isCheckBoxInput(event.target)\r\n        ? event.target.checked\r\n        : event.target.value\r\n    : event;\n\nvar getNodeParentName = (name) => name.substring(0, name.search(/\\.\\d+(\\.|$)/)) || name;\n\nvar isNameInFieldArray = (names, name) => names.has(getNodeParentName(name));\n\nvar compact = (value) => Array.isArray(value) ? value.filter(Boolean) : [];\n\nvar isUndefined = (val) => val === undefined;\n\nvar get = (obj, path, defaultValue) => {\r\n    if (!path || !isObject(obj)) {\r\n        return defaultValue;\r\n    }\r\n    const result = compact(path.split(/[,[\\].]+?/)).reduce((result, key) => isNullOrUndefined(result) ? result : result[key], obj);\r\n    return isUndefined(result) || result === obj\r\n        ? isUndefined(obj[path])\r\n            ? defaultValue\r\n            : obj[path]\r\n        : result;\r\n};\n\nconst EVENTS = {\r\n    BLUR: 'blur',\r\n    FOCUS_OUT: 'focusout',\r\n    CHANGE: 'change',\r\n};\r\nconst VALIDATION_MODE = {\r\n    onBlur: 'onBlur',\r\n    onChange: 'onChange',\r\n    onSubmit: 'onSubmit',\r\n    onTouched: 'onTouched',\r\n    all: 'all',\r\n};\r\nconst INPUT_VALIDATION_RULES = {\r\n    max: 'max',\r\n    min: 'min',\r\n    maxLength: 'maxLength',\r\n    minLength: 'minLength',\r\n    pattern: 'pattern',\r\n    required: 'required',\r\n    validate: 'validate',\r\n};\n\nconst HookFormContext = React.createContext(null);\r\n/**\r\n * This custom hook allows you to access the form context. useFormContext is intended to be used in deeply nested structures, where it would become inconvenient to pass the context as a prop. To be used with {@link FormProvider}.\r\n *\r\n * @remarks\r\n * [API](https://react-hook-form.com/api/useformcontext) • [Demo](https://codesandbox.io/s/react-hook-form-v7-form-context-ytudi)\r\n *\r\n * @returns return all useForm methods\r\n *\r\n * @example\r\n * ```tsx\r\n * function App() {\r\n *   const methods = useForm();\r\n *   const onSubmit = data => console.log(data);\r\n *\r\n *   return (\r\n *     <FormProvider {...methods} >\r\n *       <form onSubmit={methods.handleSubmit(onSubmit)}>\r\n *         <NestedInput />\r\n *         <input type=\"submit\" />\r\n *       </form>\r\n *     </FormProvider>\r\n *   );\r\n * }\r\n *\r\n *  function NestedInput() {\r\n *   const { register } = useFormContext(); // retrieve all hook methods\r\n *   return <input {...register(\"test\")} />;\r\n * }\r\n * ```\r\n */\r\nconst useFormContext = () => React.useContext(HookFormContext);\r\n/**\r\n * A provider component that propagates the `useForm` methods to all children components via [React Context](https://reactjs.org/docs/context.html) API. To be used with {@link useFormContext}.\r\n *\r\n * @remarks\r\n * [API](https://react-hook-form.com/api/useformcontext) • [Demo](https://codesandbox.io/s/react-hook-form-v7-form-context-ytudi)\r\n *\r\n * @param props - all useFrom methods\r\n *\r\n * @example\r\n * ```tsx\r\n * function App() {\r\n *   const methods = useForm();\r\n *   const onSubmit = data => console.log(data);\r\n *\r\n *   return (\r\n *     <FormProvider {...methods} >\r\n *       <form onSubmit={methods.handleSubmit(onSubmit)}>\r\n *         <NestedInput />\r\n *         <input type=\"submit\" />\r\n *       </form>\r\n *     </FormProvider>\r\n *   );\r\n * }\r\n *\r\n *  function NestedInput() {\r\n *   const { register } = useFormContext(); // retrieve all hook methods\r\n *   return <input {...register(\"test\")} />;\r\n * }\r\n * ```\r\n */\r\nconst FormProvider = (props) => {\r\n    const { children, ...data } = props;\r\n    return (React.createElement(HookFormContext.Provider, { value: data }, children));\r\n};\n\nvar getProxyFormState = (formState, _proxyFormState, localProxyFormState, isRoot = true) => {\r\n    const result = {};\r\n    for (const key in formState) {\r\n        Object.defineProperty(result, key, {\r\n            get: () => {\r\n                const _key = key;\r\n                if (_proxyFormState[_key] !== VALIDATION_MODE.all) {\r\n                    _proxyFormState[_key] = !isRoot || VALIDATION_MODE.all;\r\n                }\r\n                localProxyFormState && (localProxyFormState[_key] = true);\r\n                return formState[_key];\r\n            },\r\n        });\r\n    }\r\n    return result;\r\n};\n\nvar isEmptyObject = (value) => isObject(value) && !Object.keys(value).length;\n\nvar shouldRenderFormState = (formStateData, _proxyFormState, isRoot) => {\r\n    const { name, ...formState } = formStateData;\r\n    return (isEmptyObject(formState) ||\r\n        Object.keys(formState).length >= Object.keys(_proxyFormState).length ||\r\n        Object.keys(formState).find((key) => _proxyFormState[key] ===\r\n            (!isRoot || VALIDATION_MODE.all)));\r\n};\n\nvar convertToArrayPayload = (value) => (Array.isArray(value) ? value : [value]);\n\nvar shouldSubscribeByName = (name, signalName, exact) => exact && signalName\r\n    ? name === signalName\r\n    : !name ||\r\n        !signalName ||\r\n        name === signalName ||\r\n        convertToArrayPayload(name).some((currentName) => currentName &&\r\n            (currentName.startsWith(signalName) ||\r\n                signalName.startsWith(currentName)));\n\nfunction useSubscribe(props) {\r\n    const _props = React.useRef(props);\r\n    _props.current = props;\r\n    React.useEffect(() => {\r\n        const tearDown = (subscription) => {\r\n            if (subscription) {\r\n                subscription.unsubscribe();\r\n            }\r\n        };\r\n        const subscription = !props.disabled &&\r\n            _props.current.subject.subscribe({\r\n                next: _props.current.callback,\r\n            });\r\n        return () => tearDown(subscription);\r\n    }, [props.disabled]);\r\n}\n\n/**\r\n * This custom hook allows you to subscribe to each form state, and isolate the re-render at the custom hook level. It has its scope in terms of form state subscription, so it would not affect other useFormState and useForm. Using this hook can reduce the re-render impact on large and complex form application.\r\n *\r\n * @remarks\r\n * [API](https://react-hook-form.com/api/useformstate) • [Demo](https://codesandbox.io/s/useformstate-75xly)\r\n *\r\n * @param props - include options on specify fields to subscribe. {@link UseFormStateReturn}\r\n *\r\n * @example\r\n * ```tsx\r\n * function App() {\r\n *   const { register, handleSubmit, control } = useForm({\r\n *     defaultValues: {\r\n *     firstName: \"firstName\"\r\n *   }});\r\n *   const { dirtyFields } = useFormState({\r\n *     control\r\n *   });\r\n *   const onSubmit = (data) => console.log(data);\r\n *\r\n *   return (\r\n *     <form onSubmit={handleSubmit(onSubmit)}>\r\n *       <input {...register(\"firstName\")} placeholder=\"First Name\" />\r\n *       {dirtyFields.firstName && <p>Field is dirty.</p>}\r\n *       <input type=\"submit\" />\r\n *     </form>\r\n *   );\r\n * }\r\n * ```\r\n */\r\nfunction useFormState(props) {\r\n    const methods = useFormContext();\r\n    const { control = methods.control, disabled, name, exact } = props || {};\r\n    const [formState, updateFormState] = React.useState(control._formState);\r\n    const _localProxyFormState = React.useRef({\r\n        isDirty: false,\r\n        dirtyFields: false,\r\n        touchedFields: false,\r\n        isValidating: false,\r\n        isValid: false,\r\n        errors: false,\r\n    });\r\n    const _name = React.useRef(name);\r\n    const _mounted = React.useRef(true);\r\n    _name.current = name;\r\n    const callback = React.useCallback((value) => _mounted.current &&\r\n        shouldSubscribeByName(_name.current, value.name, exact) &&\r\n        shouldRenderFormState(value, _localProxyFormState.current) &&\r\n        updateFormState({\r\n            ...control._formState,\r\n            ...value,\r\n        }), [control, exact]);\r\n    useSubscribe({\r\n        disabled,\r\n        callback,\r\n        subject: control._subjects.state,\r\n    });\r\n    React.useEffect(() => {\r\n        _mounted.current = true;\r\n        return () => {\r\n            _mounted.current = false;\r\n        };\r\n    }, []);\r\n    return getProxyFormState(formState, control._proxyFormState, _localProxyFormState.current, false);\r\n}\n\nvar isString = (value) => typeof value === 'string';\n\nvar generateWatchOutput = (names, _names, formValues, isGlobal) => {\r\n    const isArray = Array.isArray(names);\r\n    if (isString(names)) {\r\n        isGlobal && _names.watch.add(names);\r\n        return get(formValues, names);\r\n    }\r\n    if (isArray) {\r\n        return names.map((fieldName) => (isGlobal && _names.watch.add(fieldName),\r\n            get(formValues, fieldName)));\r\n    }\r\n    isGlobal && (_names.watchAll = true);\r\n    return formValues;\r\n};\n\nvar isFunction = (value) => typeof value === 'function';\n\nvar objectHasFunction = (data) => {\r\n    for (const key in data) {\r\n        if (isFunction(data[key])) {\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n};\n\n/**\r\n * Custom hook to subscribe to field change and isolate re-rendering at the component level.\r\n *\r\n * @remarks\r\n *\r\n * [API](https://react-hook-form.com/api/usewatch) • [Demo](https://codesandbox.io/s/react-hook-form-v7-ts-usewatch-h9i5e)\r\n *\r\n * @example\r\n * ```tsx\r\n * const { watch } = useForm();\r\n * const values = useWatch({\r\n *   name: \"fieldName\"\r\n *   control,\r\n * })\r\n * ```\r\n */\r\nfunction useWatch(props) {\r\n    const methods = useFormContext();\r\n    const { control = methods.control, name, defaultValue, disabled, exact, } = props || {};\r\n    const _name = React.useRef(name);\r\n    _name.current = name;\r\n    const callback = React.useCallback((formState) => {\r\n        if (shouldSubscribeByName(_name.current, formState.name, exact)) {\r\n            const fieldValues = generateWatchOutput(_name.current, control._names, formState.values || control._formValues);\r\n            updateValue(isUndefined(_name.current) ||\r\n                (isObject(fieldValues) && !objectHasFunction(fieldValues))\r\n                ? { ...fieldValues }\r\n                : Array.isArray(fieldValues)\r\n                    ? [...fieldValues]\r\n                    : isUndefined(fieldValues)\r\n                        ? defaultValue\r\n                        : fieldValues);\r\n        }\r\n    }, [control, exact, defaultValue]);\r\n    useSubscribe({\r\n        disabled,\r\n        subject: control._subjects.watch,\r\n        callback,\r\n    });\r\n    const [value, updateValue] = React.useState(isUndefined(defaultValue)\r\n        ? control._getWatch(name)\r\n        : defaultValue);\r\n    React.useEffect(() => {\r\n        control._removeUnmounted();\r\n    });\r\n    return value;\r\n}\n\n/**\r\n * Custom hook to work with controlled component, this function provide you with both form and field level state. Re-render is isolated at the hook level.\r\n *\r\n * @remarks\r\n * [API](https://react-hook-form.com/api/usecontroller) • [Demo](https://codesandbox.io/s/usecontroller-0o8px)\r\n *\r\n * @param props - the path name to the form field value, and validation rules.\r\n *\r\n * @returns field properties, field and form state. {@link UseControllerReturn}\r\n *\r\n * @example\r\n * ```tsx\r\n * function Input(props) {\r\n *   const { field, fieldState, formState } = useController(props);\r\n *   return (\r\n *     <div>\r\n *       <input {...field} placeholder={props.name} />\r\n *       <p>{fieldState.isTouched && \"Touched\"}</p>\r\n *       <p>{formState.isSubmitted ? \"submitted\" : \"\"}</p>\r\n *     </div>\r\n *   );\r\n * }\r\n * ```\r\n */\r\nfunction useController(props) {\r\n    const methods = useFormContext();\r\n    const { name, control = methods.control, shouldUnregister } = props;\r\n    const isArrayField = isNameInFieldArray(control._names.array, name);\r\n    const value = useWatch({\r\n        control,\r\n        name,\r\n        defaultValue: get(control._formValues, name, get(control._defaultValues, name, props.defaultValue)),\r\n        exact: true,\r\n    });\r\n    const formState = useFormState({\r\n        control,\r\n        name,\r\n    });\r\n    const _registerProps = React.useRef(control.register(name, {\r\n        ...props.rules,\r\n        value,\r\n    }));\r\n    React.useEffect(() => {\r\n        const updateMounted = (name, value) => {\r\n            const field = get(control._fields, name);\r\n            if (field) {\r\n                field._f.mount = value;\r\n            }\r\n        };\r\n        updateMounted(name, true);\r\n        return () => {\r\n            const _shouldUnregisterField = control._options.shouldUnregister || shouldUnregister;\r\n            (isArrayField\r\n                ? _shouldUnregisterField && !control._stateFlags.action\r\n                : _shouldUnregisterField)\r\n                ? control.unregister(name)\r\n                : updateMounted(name, false);\r\n        };\r\n    }, [name, control, isArrayField, shouldUnregister]);\r\n    return {\r\n        field: {\r\n            name,\r\n            value,\r\n            onChange: React.useCallback((event) => {\r\n                _registerProps.current.onChange({\r\n                    target: {\r\n                        value: getEventValue(event),\r\n                        name: name,\r\n                    },\r\n                    type: EVENTS.CHANGE,\r\n                });\r\n            }, [name]),\r\n            onBlur: React.useCallback(() => {\r\n                _registerProps.current.onBlur({\r\n                    target: {\r\n                        value: get(control._formValues, name),\r\n                        name: name,\r\n                    },\r\n                    type: EVENTS.BLUR,\r\n                });\r\n            }, [name, control]),\r\n            ref: React.useCallback((elm) => {\r\n                const field = get(control._fields, name);\r\n                if (elm && field && elm.focus) {\r\n                    field._f.ref = {\r\n                        focus: () => elm.focus(),\r\n                        select: () => elm.select(),\r\n                        setCustomValidity: (message) => elm.setCustomValidity(message),\r\n                        reportValidity: () => elm.reportValidity(),\r\n                    };\r\n                }\r\n            }, [name, control._fields]),\r\n        },\r\n        formState,\r\n        fieldState: Object.defineProperties({}, {\r\n            invalid: {\r\n                get: () => !!get(formState.errors, name),\r\n            },\r\n            isDirty: {\r\n                get: () => !!get(formState.dirtyFields, name),\r\n            },\r\n            isTouched: {\r\n                get: () => !!get(formState.touchedFields, name),\r\n            },\r\n            error: {\r\n                get: () => get(formState.errors, name),\r\n            },\r\n        }),\r\n    };\r\n}\n\n/**\r\n * Component based on `useController` hook to work with controlled component.\r\n *\r\n * @remarks\r\n * [API](https://react-hook-form.com/api/usecontroller/controller) • [Demo](https://codesandbox.io/s/react-hook-form-v6-controller-ts-jwyzw) • [Video](https://www.youtube.com/watch?v=N2UNk_UCVyA)\r\n *\r\n * @param props - the path name to the form field value, and validation rules.\r\n *\r\n * @returns provide field handler functions, field and form state.\r\n *\r\n * @example\r\n * ```tsx\r\n * function App() {\r\n *   const { control } = useForm<FormValues>({\r\n *     defaultValues: {\r\n *       test: \"\"\r\n *     }\r\n *   });\r\n *\r\n *   return (\r\n *     <form>\r\n *       <Controller\r\n *         control={control}\r\n *         name=\"test\"\r\n *         render={({ field: { onChange, onBlur, value, ref }, formState, fieldState }) => (\r\n *           <>\r\n *             <input\r\n *               onChange={onChange} // send value to hook form\r\n *               onBlur={onBlur} // notify when input is touched\r\n *               value={value} // return updated value\r\n *               ref={ref} // set ref for focus management\r\n *             />\r\n *             <p>{formState.isSubmitted ? \"submitted\" : \"\"}</p>\r\n *             <p>{fieldState.isTouched ? \"touched\" : \"\"}</p>\r\n *           </>\r\n *         )}\r\n *       />\r\n *     </form>\r\n *   );\r\n * }\r\n * ```\r\n */\r\nconst Controller = (props) => props.render(useController(props));\n\nvar appendErrors = (name, validateAllFieldCriteria, errors, type, message) => validateAllFieldCriteria\r\n    ? {\r\n        ...errors[name],\r\n        types: {\r\n            ...(errors[name] && errors[name].types ? errors[name].types : {}),\r\n            [type]: message || true,\r\n        },\r\n    }\r\n    : {};\n\nvar isKey = (value) => /^\\w*$/.test(value);\n\nvar stringToPath = (input) => compact(input.replace(/[\"|']|\\]/g, '').split(/\\.|\\[/));\n\nfunction set(object, path, value) {\r\n    let index = -1;\r\n    const tempPath = isKey(path) ? [path] : stringToPath(path);\r\n    const length = tempPath.length;\r\n    const lastIndex = length - 1;\r\n    while (++index < length) {\r\n        const key = tempPath[index];\r\n        let newValue = value;\r\n        if (index !== lastIndex) {\r\n            const objValue = object[key];\r\n            newValue =\r\n                isObject(objValue) || Array.isArray(objValue)\r\n                    ? objValue\r\n                    : !isNaN(+tempPath[index + 1])\r\n                        ? []\r\n                        : {};\r\n        }\r\n        object[key] = newValue;\r\n        object = object[key];\r\n    }\r\n    return object;\r\n}\n\nconst focusFieldBy = (fields, callback, fieldsNames) => {\r\n    for (const key of fieldsNames || Object.keys(fields)) {\r\n        const field = get(fields, key);\r\n        if (field) {\r\n            const { _f, ...currentField } = field;\r\n            if (_f && callback(_f.name)) {\r\n                if (_f.ref.focus && isUndefined(_f.ref.focus())) {\r\n                    break;\r\n                }\r\n                else if (_f.refs) {\r\n                    _f.refs[0].focus();\r\n                    break;\r\n                }\r\n            }\r\n            else if (isObject(currentField)) {\r\n                focusFieldBy(currentField, callback);\r\n            }\r\n        }\r\n    }\r\n};\n\nvar generateId = () => {\r\n    const d = typeof performance === 'undefined' ? Date.now() : performance.now() * 1000;\r\n    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, (c) => {\r\n        const r = (Math.random() * 16 + d) % 16 | 0;\r\n        return (c == 'x' ? r : (r & 0x3) | 0x8).toString(16);\r\n    });\r\n};\n\nvar getFocusFieldName = (name, index, options = {}) => options.shouldFocus || isUndefined(options.shouldFocus)\r\n    ? options.focusName ||\r\n        `${name}.${isUndefined(options.focusIndex) ? index : options.focusIndex}.`\r\n    : '';\n\nvar isWatched = (name, _names, isBlurEvent) => !isBlurEvent &&\r\n    (_names.watchAll ||\r\n        _names.watch.has(name) ||\r\n        [..._names.watch].some((watchName) => name.startsWith(watchName) &&\r\n            /^\\.\\w+/.test(name.slice(watchName.length))));\n\nvar updateFieldArrayRootError = (errors, error, name) => {\r\n    const fieldArrayErrors = compact(get(errors, name));\r\n    set(fieldArrayErrors, 'root', error[name]);\r\n    set(errors, name, fieldArrayErrors);\r\n    return errors;\r\n};\n\nvar isBoolean = (value) => typeof value === 'boolean';\n\nvar isFileInput = (element) => element.type === 'file';\n\nvar isMessage = (value) => isString(value) || React.isValidElement(value);\n\nvar isRadioInput = (element) => element.type === 'radio';\n\nvar isRegex = (value) => value instanceof RegExp;\n\nconst defaultResult = {\r\n    value: false,\r\n    isValid: false,\r\n};\r\nconst validResult = { value: true, isValid: true };\r\nvar getCheckboxValue = (options) => {\r\n    if (Array.isArray(options)) {\r\n        if (options.length > 1) {\r\n            const values = options\r\n                .filter((option) => option && option.checked && !option.disabled)\r\n                .map((option) => option.value);\r\n            return { value: values, isValid: !!values.length };\r\n        }\r\n        return options[0].checked && !options[0].disabled\r\n            ? // @ts-expect-error expected to work in the browser\r\n                options[0].attributes && !isUndefined(options[0].attributes.value)\r\n                    ? isUndefined(options[0].value) || options[0].value === ''\r\n                        ? validResult\r\n                        : { value: options[0].value, isValid: true }\r\n                    : validResult\r\n            : defaultResult;\r\n    }\r\n    return defaultResult;\r\n};\n\nconst defaultReturn = {\r\n    isValid: false,\r\n    value: null,\r\n};\r\nvar getRadioValue = (options) => Array.isArray(options)\r\n    ? options.reduce((previous, option) => option && option.checked && !option.disabled\r\n        ? {\r\n            isValid: true,\r\n            value: option.value,\r\n        }\r\n        : previous, defaultReturn)\r\n    : defaultReturn;\n\nfunction getValidateError(result, ref, type = 'validate') {\r\n    if (isMessage(result) ||\r\n        (Array.isArray(result) && result.every(isMessage)) ||\r\n        (isBoolean(result) && !result)) {\r\n        return {\r\n            type,\r\n            message: isMessage(result) ? result : '',\r\n            ref,\r\n        };\r\n    }\r\n}\n\nvar getValueAndMessage = (validationData) => isObject(validationData) && !isRegex(validationData)\r\n    ? validationData\r\n    : {\r\n        value: validationData,\r\n        message: '',\r\n    };\n\nvar validateField = async (field, inputValue, validateAllFieldCriteria, shouldUseNativeValidation, isFieldArray) => {\r\n    const { ref, refs, required, maxLength, minLength, min, max, pattern, validate, name, valueAsNumber, mount, disabled, } = field._f;\r\n    if (!mount || disabled) {\r\n        return {};\r\n    }\r\n    const inputRef = refs ? refs[0] : ref;\r\n    const setCustomValidity = (message) => {\r\n        if (shouldUseNativeValidation && inputRef.reportValidity) {\r\n            inputRef.setCustomValidity(isBoolean(message) ? '' : message || ' ');\r\n            inputRef.reportValidity();\r\n        }\r\n    };\r\n    const error = {};\r\n    const isRadio = isRadioInput(ref);\r\n    const isCheckBox = isCheckBoxInput(ref);\r\n    const isRadioOrCheckbox = isRadio || isCheckBox;\r\n    const isEmpty = ((valueAsNumber || isFileInput(ref)) && !ref.value) ||\r\n        inputValue === '' ||\r\n        (Array.isArray(inputValue) && !inputValue.length);\r\n    const appendErrorsCurry = appendErrors.bind(null, name, validateAllFieldCriteria, error);\r\n    const getMinMaxMessage = (exceedMax, maxLengthMessage, minLengthMessage, maxType = INPUT_VALIDATION_RULES.maxLength, minType = INPUT_VALIDATION_RULES.minLength) => {\r\n        const message = exceedMax ? maxLengthMessage : minLengthMessage;\r\n        error[name] = {\r\n            type: exceedMax ? maxType : minType,\r\n            message,\r\n            ref,\r\n            ...appendErrorsCurry(exceedMax ? maxType : minType, message),\r\n        };\r\n    };\r\n    if (isFieldArray\r\n        ? !Array.isArray(inputValue) || !inputValue.length\r\n        : required &&\r\n            ((!isRadioOrCheckbox && (isEmpty || isNullOrUndefined(inputValue))) ||\r\n                (isBoolean(inputValue) && !inputValue) ||\r\n                (isCheckBox && !getCheckboxValue(refs).isValid) ||\r\n                (isRadio && !getRadioValue(refs).isValid))) {\r\n        const { value, message } = isMessage(required)\r\n            ? { value: !!required, message: required }\r\n            : getValueAndMessage(required);\r\n        if (value) {\r\n            error[name] = {\r\n                type: INPUT_VALIDATION_RULES.required,\r\n                message,\r\n                ref: inputRef,\r\n                ...appendErrorsCurry(INPUT_VALIDATION_RULES.required, message),\r\n            };\r\n            if (!validateAllFieldCriteria) {\r\n                setCustomValidity(message);\r\n                return error;\r\n            }\r\n        }\r\n    }\r\n    if (!isEmpty && (!isNullOrUndefined(min) || !isNullOrUndefined(max))) {\r\n        let exceedMax;\r\n        let exceedMin;\r\n        const maxOutput = getValueAndMessage(max);\r\n        const minOutput = getValueAndMessage(min);\r\n        if (!isNullOrUndefined(inputValue) && !isNaN(inputValue)) {\r\n            const valueNumber = ref.valueAsNumber || +inputValue;\r\n            if (!isNullOrUndefined(maxOutput.value)) {\r\n                exceedMax = valueNumber > maxOutput.value;\r\n            }\r\n            if (!isNullOrUndefined(minOutput.value)) {\r\n                exceedMin = valueNumber < minOutput.value;\r\n            }\r\n        }\r\n        else {\r\n            const valueDate = ref.valueAsDate || new Date(inputValue);\r\n            if (isString(maxOutput.value)) {\r\n                exceedMax = valueDate > new Date(maxOutput.value);\r\n            }\r\n            if (isString(minOutput.value)) {\r\n                exceedMin = valueDate < new Date(minOutput.value);\r\n            }\r\n        }\r\n        if (exceedMax || exceedMin) {\r\n            getMinMaxMessage(!!exceedMax, maxOutput.message, minOutput.message, INPUT_VALIDATION_RULES.max, INPUT_VALIDATION_RULES.min);\r\n            if (!validateAllFieldCriteria) {\r\n                setCustomValidity(error[name].message);\r\n                return error;\r\n            }\r\n        }\r\n    }\r\n    if ((maxLength || minLength) &&\r\n        !isEmpty &&\r\n        (isString(inputValue) || (isFieldArray && Array.isArray(inputValue)))) {\r\n        const maxLengthOutput = getValueAndMessage(maxLength);\r\n        const minLengthOutput = getValueAndMessage(minLength);\r\n        const exceedMax = !isNullOrUndefined(maxLengthOutput.value) &&\r\n            inputValue.length > maxLengthOutput.value;\r\n        const exceedMin = !isNullOrUndefined(minLengthOutput.value) &&\r\n            inputValue.length < minLengthOutput.value;\r\n        if (exceedMax || exceedMin) {\r\n            getMinMaxMessage(exceedMax, maxLengthOutput.message, minLengthOutput.message);\r\n            if (!validateAllFieldCriteria) {\r\n                setCustomValidity(error[name].message);\r\n                return error;\r\n            }\r\n        }\r\n    }\r\n    if (pattern && !isEmpty && isString(inputValue)) {\r\n        const { value: patternValue, message } = getValueAndMessage(pattern);\r\n        if (isRegex(patternValue) && !inputValue.match(patternValue)) {\r\n            error[name] = {\r\n                type: INPUT_VALIDATION_RULES.pattern,\r\n                message,\r\n                ref,\r\n                ...appendErrorsCurry(INPUT_VALIDATION_RULES.pattern, message),\r\n            };\r\n            if (!validateAllFieldCriteria) {\r\n                setCustomValidity(message);\r\n                return error;\r\n            }\r\n        }\r\n    }\r\n    if (validate) {\r\n        if (isFunction(validate)) {\r\n            const result = await validate(inputValue);\r\n            const validateError = getValidateError(result, inputRef);\r\n            if (validateError) {\r\n                error[name] = {\r\n                    ...validateError,\r\n                    ...appendErrorsCurry(INPUT_VALIDATION_RULES.validate, validateError.message),\r\n                };\r\n                if (!validateAllFieldCriteria) {\r\n                    setCustomValidity(validateError.message);\r\n                    return error;\r\n                }\r\n            }\r\n        }\r\n        else if (isObject(validate)) {\r\n            let validationResult = {};\r\n            for (const key in validate) {\r\n                if (!isEmptyObject(validationResult) && !validateAllFieldCriteria) {\r\n                    break;\r\n                }\r\n                const validateError = getValidateError(await validate[key](inputValue), inputRef, key);\r\n                if (validateError) {\r\n                    validationResult = {\r\n                        ...validateError,\r\n                        ...appendErrorsCurry(key, validateError.message),\r\n                    };\r\n                    setCustomValidity(validateError.message);\r\n                    if (validateAllFieldCriteria) {\r\n                        error[name] = validationResult;\r\n                    }\r\n                }\r\n            }\r\n            if (!isEmptyObject(validationResult)) {\r\n                error[name] = {\r\n                    ref: inputRef,\r\n                    ...validationResult,\r\n                };\r\n                if (!validateAllFieldCriteria) {\r\n                    return error;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    setCustomValidity(true);\r\n    return error;\r\n};\n\nfunction append(data, value) {\r\n    return [...data, ...convertToArrayPayload(value)];\r\n}\n\nvar isWeb = typeof window !== 'undefined' &&\r\n    typeof window.HTMLElement !== 'undefined' &&\r\n    typeof document !== 'undefined';\n\nfunction cloneObject(data) {\r\n    let copy;\r\n    const isArray = Array.isArray(data);\r\n    if (data instanceof Date) {\r\n        copy = new Date(data);\r\n    }\r\n    else if (data instanceof Set) {\r\n        copy = new Set(data);\r\n    }\r\n    else if (!(isWeb && (data instanceof Blob || data instanceof FileList)) &&\r\n        (isArray || isObject(data))) {\r\n        copy = isArray ? [] : {};\r\n        for (const key in data) {\r\n            if (isFunction(data[key])) {\r\n                copy = data;\r\n                break;\r\n            }\r\n            copy[key] = cloneObject(data[key]);\r\n        }\r\n    }\r\n    else {\r\n        return data;\r\n    }\r\n    return copy;\r\n}\n\nvar fillEmptyArray = (value) => Array.isArray(value) ? value.map(() => undefined) : undefined;\n\nvar getValidationModes = (mode) => ({\r\n    isOnSubmit: !mode || mode === VALIDATION_MODE.onSubmit,\r\n    isOnBlur: mode === VALIDATION_MODE.onBlur,\r\n    isOnChange: mode === VALIDATION_MODE.onChange,\r\n    isOnAll: mode === VALIDATION_MODE.all,\r\n    isOnTouch: mode === VALIDATION_MODE.onTouched,\r\n});\n\nfunction insert(data, index, value) {\r\n    return [\r\n        ...data.slice(0, index),\r\n        ...convertToArrayPayload(value),\r\n        ...data.slice(index),\r\n    ];\r\n}\n\nvar moveArrayAt = (data, from, to) => {\r\n    if (!Array.isArray(data)) {\r\n        return [];\r\n    }\r\n    if (isUndefined(data[to])) {\r\n        data[to] = undefined;\r\n    }\r\n    data.splice(to, 0, data.splice(from, 1)[0]);\r\n    return data;\r\n};\n\nfunction prepend(data, value) {\r\n    return [...convertToArrayPayload(value), ...convertToArrayPayload(data)];\r\n}\n\nfunction removeAtIndexes(data, indexes) {\r\n    let i = 0;\r\n    const temp = [...data];\r\n    for (const index of indexes) {\r\n        temp.splice(index - i, 1);\r\n        i++;\r\n    }\r\n    return compact(temp).length ? temp : [];\r\n}\r\nvar removeArrayAt = (data, index) => isUndefined(index)\r\n    ? []\r\n    : removeAtIndexes(data, convertToArrayPayload(index).sort((a, b) => a - b));\n\nvar swapArrayAt = (data, indexA, indexB) => {\r\n    data[indexA] = [data[indexB], (data[indexB] = data[indexA])][0];\r\n};\n\nfunction baseGet(object, updatePath) {\r\n    const length = updatePath.slice(0, -1).length;\r\n    let index = 0;\r\n    while (index < length) {\r\n        object = isUndefined(object) ? index++ : object[updatePath[index++]];\r\n    }\r\n    return object;\r\n}\r\nfunction isEmptyArray(obj) {\r\n    for (const key in obj) {\r\n        if (!isUndefined(obj[key])) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}\r\nfunction unset(object, path) {\r\n    const updatePath = isKey(path) ? [path] : stringToPath(path);\r\n    const childObject = updatePath.length == 1 ? object : baseGet(object, updatePath);\r\n    const key = updatePath[updatePath.length - 1];\r\n    let previousObjRef;\r\n    if (childObject) {\r\n        delete childObject[key];\r\n    }\r\n    for (let k = 0; k < updatePath.slice(0, -1).length; k++) {\r\n        let index = -1;\r\n        let objectRef;\r\n        const currentPaths = updatePath.slice(0, -(k + 1));\r\n        const currentPathsLength = currentPaths.length - 1;\r\n        if (k > 0) {\r\n            previousObjRef = object;\r\n        }\r\n        while (++index < currentPaths.length) {\r\n            const item = currentPaths[index];\r\n            objectRef = objectRef ? objectRef[item] : object[item];\r\n            if (currentPathsLength === index &&\r\n                ((isObject(objectRef) && isEmptyObject(objectRef)) ||\r\n                    (Array.isArray(objectRef) && isEmptyArray(objectRef)))) {\r\n                previousObjRef ? delete previousObjRef[item] : delete object[item];\r\n            }\r\n            previousObjRef = objectRef;\r\n        }\r\n    }\r\n    return object;\r\n}\n\nvar updateAt = (fieldValues, index, value) => {\r\n    fieldValues[index] = value;\r\n    return fieldValues;\r\n};\n\n/**\r\n * A custom hook that exposes convenient methods to perform operations with a list of dynamic inputs that need to be appended, updated, removed etc.\r\n *\r\n * @remarks\r\n * [API](https://react-hook-form.com/api/usefieldarray) • [Demo](https://codesandbox.io/s/react-hook-form-usefieldarray-ssugn)\r\n *\r\n * @param props - useFieldArray props\r\n *\r\n * @returns methods - functions to manipulate with the Field Arrays (dynamic inputs) {@link UseFieldArrayReturn}\r\n *\r\n * @example\r\n * ```tsx\r\n * function App() {\r\n *   const { register, control, handleSubmit, reset, trigger, setError } = useForm({\r\n *     defaultValues: {\r\n *       test: []\r\n *     }\r\n *   });\r\n *   const { fields, append } = useFieldArray({\r\n *     control,\r\n *     name: \"test\"\r\n *   });\r\n *\r\n *   return (\r\n *     <form onSubmit={handleSubmit(data => console.log(data))}>\r\n *       {fields.map((item, index) => (\r\n *          <input key={item.id} {...register(`test.${index}.firstName`)}  />\r\n *       ))}\r\n *       <button type=\"button\" onClick={() => append({ firstName: \"bill\" })}>\r\n *         append\r\n *       </button>\r\n *       <input type=\"submit\" />\r\n *     </form>\r\n *   );\r\n * }\r\n * ```\r\n */\r\nfunction useFieldArray(props) {\r\n    const methods = useFormContext();\r\n    const { control = methods.control, name, keyName = 'id', shouldUnregister, } = props;\r\n    const [fields, setFields] = React.useState(control._getFieldArray(name));\r\n    const ids = React.useRef(control._getFieldArray(name).map(generateId));\r\n    const _fieldIds = React.useRef(fields);\r\n    const _name = React.useRef(name);\r\n    const _actioned = React.useRef(false);\r\n    _name.current = name;\r\n    _fieldIds.current = fields;\r\n    control._names.array.add(name);\r\n    props.rules &&\r\n        control.register(name, props.rules);\r\n    const callback = React.useCallback(({ values, name: fieldArrayName, }) => {\r\n        if (fieldArrayName === _name.current || !fieldArrayName) {\r\n            const fieldValues = get(values, _name.current, []);\r\n            setFields(fieldValues);\r\n            ids.current = fieldValues.map(generateId);\r\n        }\r\n    }, []);\r\n    useSubscribe({\r\n        callback,\r\n        subject: control._subjects.array,\r\n    });\r\n    const updateValues = React.useCallback((updatedFieldArrayValues) => {\r\n        _actioned.current = true;\r\n        control._updateFieldArray(name, updatedFieldArrayValues);\r\n    }, [control, name]);\r\n    const append$1 = (value, options) => {\r\n        const appendValue = convertToArrayPayload(cloneObject(value));\r\n        const updatedFieldArrayValues = append(control._getFieldArray(name), appendValue);\r\n        control._names.focus = getFocusFieldName(name, updatedFieldArrayValues.length - 1, options);\r\n        ids.current = append(ids.current, appendValue.map(generateId));\r\n        updateValues(updatedFieldArrayValues);\r\n        setFields(updatedFieldArrayValues);\r\n        control._updateFieldArray(name, updatedFieldArrayValues, append, {\r\n            argA: fillEmptyArray(value),\r\n        });\r\n    };\r\n    const prepend$1 = (value, options) => {\r\n        const prependValue = convertToArrayPayload(cloneObject(value));\r\n        const updatedFieldArrayValues = prepend(control._getFieldArray(name), prependValue);\r\n        control._names.focus = getFocusFieldName(name, 0, options);\r\n        ids.current = prepend(ids.current, prependValue.map(generateId));\r\n        updateValues(updatedFieldArrayValues);\r\n        setFields(updatedFieldArrayValues);\r\n        control._updateFieldArray(name, updatedFieldArrayValues, prepend, {\r\n            argA: fillEmptyArray(value),\r\n        });\r\n    };\r\n    const remove = (index) => {\r\n        const updatedFieldArrayValues = removeArrayAt(control._getFieldArray(name), index);\r\n        ids.current = removeArrayAt(ids.current, index);\r\n        updateValues(updatedFieldArrayValues);\r\n        setFields(updatedFieldArrayValues);\r\n        control._updateFieldArray(name, updatedFieldArrayValues, removeArrayAt, {\r\n            argA: index,\r\n        });\r\n    };\r\n    const insert$1 = (index, value, options) => {\r\n        const insertValue = convertToArrayPayload(cloneObject(value));\r\n        const updatedFieldArrayValues = insert(control._getFieldArray(name), index, insertValue);\r\n        control._names.focus = getFocusFieldName(name, index, options);\r\n        ids.current = insert(ids.current, index, insertValue.map(generateId));\r\n        updateValues(updatedFieldArrayValues);\r\n        setFields(updatedFieldArrayValues);\r\n        control._updateFieldArray(name, updatedFieldArrayValues, insert, {\r\n            argA: index,\r\n            argB: fillEmptyArray(value),\r\n        });\r\n    };\r\n    const swap = (indexA, indexB) => {\r\n        const updatedFieldArrayValues = control._getFieldArray(name);\r\n        swapArrayAt(updatedFieldArrayValues, indexA, indexB);\r\n        swapArrayAt(ids.current, indexA, indexB);\r\n        updateValues(updatedFieldArrayValues);\r\n        setFields(updatedFieldArrayValues);\r\n        control._updateFieldArray(name, updatedFieldArrayValues, swapArrayAt, {\r\n            argA: indexA,\r\n            argB: indexB,\r\n        }, false);\r\n    };\r\n    const move = (from, to) => {\r\n        const updatedFieldArrayValues = control._getFieldArray(name);\r\n        moveArrayAt(updatedFieldArrayValues, from, to);\r\n        moveArrayAt(ids.current, from, to);\r\n        updateValues(updatedFieldArrayValues);\r\n        setFields(updatedFieldArrayValues);\r\n        control._updateFieldArray(name, updatedFieldArrayValues, moveArrayAt, {\r\n            argA: from,\r\n            argB: to,\r\n        }, false);\r\n    };\r\n    const update = (index, value) => {\r\n        const updateValue = cloneObject(value);\r\n        const updatedFieldArrayValues = updateAt(control._getFieldArray(name), index, updateValue);\r\n        ids.current = [...updatedFieldArrayValues].map((item, i) => !item || i === index ? generateId() : ids.current[i]);\r\n        updateValues(updatedFieldArrayValues);\r\n        setFields([...updatedFieldArrayValues]);\r\n        control._updateFieldArray(name, updatedFieldArrayValues, updateAt, {\r\n            argA: index,\r\n            argB: updateValue,\r\n        }, true, false);\r\n    };\r\n    const replace = (value) => {\r\n        const updatedFieldArrayValues = convertToArrayPayload(cloneObject(value));\r\n        ids.current = updatedFieldArrayValues.map(generateId);\r\n        updateValues([...updatedFieldArrayValues]);\r\n        setFields([...updatedFieldArrayValues]);\r\n        control._updateFieldArray(name, [...updatedFieldArrayValues], (data) => data, {}, true, false);\r\n    };\r\n    React.useEffect(() => {\r\n        control._stateFlags.action = false;\r\n        isWatched(name, control._names) && control._subjects.state.next({});\r\n        if (_actioned.current) {\r\n            if (control._options.resolver) {\r\n                control._executeSchema([name]).then((result) => {\r\n                    const error = get(result.errors, name);\r\n                    const existingError = get(control._formState.errors, name);\r\n                    if (existingError ? !error && existingError.type : error && error.type) {\r\n                        error\r\n                            ? set(control._formState.errors, name, error)\r\n                            : unset(control._formState.errors, name);\r\n                        control._subjects.state.next({\r\n                            errors: control._formState.errors,\r\n                        });\r\n                    }\r\n                });\r\n            }\r\n            else {\r\n                const field = get(control._fields, name);\r\n                const validationModeBeforeSubmit = getValidationModes(control._options.mode);\r\n                if ((!validationModeBeforeSubmit.isOnSubmit ||\r\n                    control._formState.isSubmitted) &&\r\n                    field &&\r\n                    field._f) {\r\n                    validateField(field, get(control._formValues, name), control._options.criteriaMode === VALIDATION_MODE.all, control._options.shouldUseNativeValidation, true).then((error) => !isEmptyObject(error) &&\r\n                        control._subjects.state.next({\r\n                            errors: updateFieldArrayRootError(control._formState.errors, error, name),\r\n                        }));\r\n                }\r\n            }\r\n        }\r\n        control._subjects.watch.next({\r\n            name,\r\n            values: control._formValues,\r\n        });\r\n        control._names.focus &&\r\n            focusFieldBy(control._fields, (key) => key.startsWith(control._names.focus));\r\n        control._names.focus = '';\r\n        control._proxyFormState.isValid && control._updateValid();\r\n    }, [fields, name, control]);\r\n    React.useEffect(() => {\r\n        !get(control._formValues, name) && control._updateFieldArray(name);\r\n        return () => {\r\n            (control._options.shouldUnregister || shouldUnregister) &&\r\n                control.unregister(name);\r\n        };\r\n    }, [name, control, keyName, shouldUnregister]);\r\n    return {\r\n        swap: React.useCallback(swap, [updateValues, name, control]),\r\n        move: React.useCallback(move, [updateValues, name, control]),\r\n        prepend: React.useCallback(prepend$1, [updateValues, name, control]),\r\n        append: React.useCallback(append$1, [updateValues, name, control]),\r\n        remove: React.useCallback(remove, [updateValues, name, control]),\r\n        insert: React.useCallback(insert$1, [updateValues, name, control]),\r\n        update: React.useCallback(update, [updateValues, name, control]),\r\n        replace: React.useCallback(replace, [updateValues, name, control]),\r\n        fields: React.useMemo(() => fields.map((field, index) => ({\r\n            ...field,\r\n            [keyName]: ids.current[index] || generateId(),\r\n        })), [fields, keyName]),\r\n    };\r\n}\n\nfunction createSubject() {\r\n    let _observers = [];\r\n    const next = (value) => {\r\n        for (const observer of _observers) {\r\n            observer.next(value);\r\n        }\r\n    };\r\n    const subscribe = (observer) => {\r\n        _observers.push(observer);\r\n        return {\r\n            unsubscribe: () => {\r\n                _observers = _observers.filter((o) => o !== observer);\r\n            },\r\n        };\r\n    };\r\n    const unsubscribe = () => {\r\n        _observers = [];\r\n    };\r\n    return {\r\n        get observers() {\r\n            return _observers;\r\n        },\r\n        next,\r\n        subscribe,\r\n        unsubscribe,\r\n    };\r\n}\n\nvar isPrimitive = (value) => isNullOrUndefined(value) || !isObjectType(value);\n\nfunction deepEqual(object1, object2) {\r\n    if (isPrimitive(object1) || isPrimitive(object2)) {\r\n        return object1 === object2;\r\n    }\r\n    if (isDateObject(object1) && isDateObject(object2)) {\r\n        return object1.getTime() === object2.getTime();\r\n    }\r\n    const keys1 = Object.keys(object1);\r\n    const keys2 = Object.keys(object2);\r\n    if (keys1.length !== keys2.length) {\r\n        return false;\r\n    }\r\n    for (const key of keys1) {\r\n        const val1 = object1[key];\r\n        if (!keys2.includes(key)) {\r\n            return false;\r\n        }\r\n        if (key !== 'ref') {\r\n            const val2 = object2[key];\r\n            if ((isDateObject(val1) && isDateObject(val2)) ||\r\n                (isObject(val1) && isObject(val2)) ||\r\n                (Array.isArray(val1) && Array.isArray(val2))\r\n                ? !deepEqual(val1, val2)\r\n                : val1 !== val2) {\r\n                return false;\r\n            }\r\n        }\r\n    }\r\n    return true;\r\n}\n\nvar isHTMLElement = (value) => {\r\n    const owner = value ? value.ownerDocument : 0;\r\n    const ElementClass = owner && owner.defaultView ? owner.defaultView.HTMLElement : HTMLElement;\r\n    return value instanceof ElementClass;\r\n};\n\nvar isMultipleSelect = (element) => element.type === `select-multiple`;\n\nvar isRadioOrCheckbox = (ref) => isRadioInput(ref) || isCheckBoxInput(ref);\n\nvar live = (ref) => isHTMLElement(ref) && ref.isConnected;\n\nfunction markFieldsDirty(data, fields = {}) {\r\n    const isParentNodeArray = Array.isArray(data);\r\n    if (isObject(data) || isParentNodeArray) {\r\n        for (const key in data) {\r\n            if (Array.isArray(data[key]) ||\r\n                (isObject(data[key]) && !objectHasFunction(data[key]))) {\r\n                fields[key] = Array.isArray(data[key]) ? [] : {};\r\n                markFieldsDirty(data[key], fields[key]);\r\n            }\r\n            else if (!isNullOrUndefined(data[key])) {\r\n                fields[key] = true;\r\n            }\r\n        }\r\n    }\r\n    return fields;\r\n}\r\nfunction getDirtyFieldsFromDefaultValues(data, formValues, dirtyFieldsFromValues) {\r\n    const isParentNodeArray = Array.isArray(data);\r\n    if (isObject(data) || isParentNodeArray) {\r\n        for (const key in data) {\r\n            if (Array.isArray(data[key]) ||\r\n                (isObject(data[key]) && !objectHasFunction(data[key]))) {\r\n                if (isUndefined(formValues) ||\r\n                    isPrimitive(dirtyFieldsFromValues[key])) {\r\n                    dirtyFieldsFromValues[key] = Array.isArray(data[key])\r\n                        ? markFieldsDirty(data[key], [])\r\n                        : { ...markFieldsDirty(data[key]) };\r\n                }\r\n                else {\r\n                    getDirtyFieldsFromDefaultValues(data[key], isNullOrUndefined(formValues) ? {} : formValues[key], dirtyFieldsFromValues[key]);\r\n                }\r\n            }\r\n            else {\r\n                dirtyFieldsFromValues[key] = !deepEqual(data[key], formValues[key]);\r\n            }\r\n        }\r\n    }\r\n    return dirtyFieldsFromValues;\r\n}\r\nvar getDirtyFields = (defaultValues, formValues) => getDirtyFieldsFromDefaultValues(defaultValues, formValues, markFieldsDirty(formValues));\n\nvar getFieldValueAs = (value, { valueAsNumber, valueAsDate, setValueAs }) => isUndefined(value)\r\n    ? value\r\n    : valueAsNumber\r\n        ? value === '' || isNullOrUndefined(value)\r\n            ? NaN\r\n            : +value\r\n        : valueAsDate && isString(value)\r\n            ? new Date(value)\r\n            : setValueAs\r\n                ? setValueAs(value)\r\n                : value;\n\nfunction getFieldValue(_f) {\r\n    const ref = _f.ref;\r\n    if (_f.refs ? _f.refs.every((ref) => ref.disabled) : ref.disabled) {\r\n        return;\r\n    }\r\n    if (isFileInput(ref)) {\r\n        return ref.files;\r\n    }\r\n    if (isRadioInput(ref)) {\r\n        return getRadioValue(_f.refs).value;\r\n    }\r\n    if (isMultipleSelect(ref)) {\r\n        return [...ref.selectedOptions].map(({ value }) => value);\r\n    }\r\n    if (isCheckBoxInput(ref)) {\r\n        return getCheckboxValue(_f.refs).value;\r\n    }\r\n    return getFieldValueAs(isUndefined(ref.value) ? _f.ref.value : ref.value, _f);\r\n}\n\nvar getResolverOptions = (fieldsNames, _fields, criteriaMode, shouldUseNativeValidation) => {\r\n    const fields = {};\r\n    for (const name of fieldsNames) {\r\n        const field = get(_fields, name);\r\n        field && set(fields, name, field._f);\r\n    }\r\n    return {\r\n        criteriaMode,\r\n        names: [...fieldsNames],\r\n        fields,\r\n        shouldUseNativeValidation,\r\n    };\r\n};\n\nvar getRuleValue = (rule) => isUndefined(rule)\r\n    ? undefined\r\n    : isRegex(rule)\r\n        ? rule.source\r\n        : isObject(rule)\r\n            ? isRegex(rule.value)\r\n                ? rule.value.source\r\n                : rule.value\r\n            : rule;\n\nvar hasValidation = (options) => options.mount &&\r\n    (options.required ||\r\n        options.min ||\r\n        options.max ||\r\n        options.maxLength ||\r\n        options.minLength ||\r\n        options.pattern ||\r\n        options.validate);\n\nfunction schemaErrorLookup(errors, _fields, name) {\r\n    const error = get(errors, name);\r\n    if (error || isKey(name)) {\r\n        return {\r\n            error,\r\n            name,\r\n        };\r\n    }\r\n    const names = name.split('.');\r\n    while (names.length) {\r\n        const fieldName = names.join('.');\r\n        const field = get(_fields, fieldName);\r\n        const foundError = get(errors, fieldName);\r\n        if (field && !Array.isArray(field) && name !== fieldName) {\r\n            return { name };\r\n        }\r\n        if (foundError && foundError.type) {\r\n            return {\r\n                name: fieldName,\r\n                error: foundError,\r\n            };\r\n        }\r\n        names.pop();\r\n    }\r\n    return {\r\n        name,\r\n    };\r\n}\n\nvar skipValidation = (isBlurEvent, isTouched, isSubmitted, reValidateMode, mode) => {\r\n    if (mode.isOnAll) {\r\n        return false;\r\n    }\r\n    else if (!isSubmitted && mode.isOnTouch) {\r\n        return !(isTouched || isBlurEvent);\r\n    }\r\n    else if (isSubmitted ? reValidateMode.isOnBlur : mode.isOnBlur) {\r\n        return !isBlurEvent;\r\n    }\r\n    else if (isSubmitted ? reValidateMode.isOnChange : mode.isOnChange) {\r\n        return isBlurEvent;\r\n    }\r\n    return true;\r\n};\n\nvar unsetEmptyArray = (ref, name) => !compact(get(ref, name)).length && unset(ref, name);\n\nconst defaultOptions = {\r\n    mode: VALIDATION_MODE.onSubmit,\r\n    reValidateMode: VALIDATION_MODE.onChange,\r\n    shouldFocusError: true,\r\n};\r\nfunction createFormControl(props = {}) {\r\n    let _options = {\r\n        ...defaultOptions,\r\n        ...props,\r\n    };\r\n    let _formState = {\r\n        isDirty: false,\r\n        isValidating: false,\r\n        dirtyFields: {},\r\n        isSubmitted: false,\r\n        submitCount: 0,\r\n        touchedFields: {},\r\n        isSubmitting: false,\r\n        isSubmitSuccessful: false,\r\n        isValid: false,\r\n        errors: {},\r\n    };\r\n    let _fields = {};\r\n    let _defaultValues = cloneObject(_options.defaultValues) || {};\r\n    let _formValues = _options.shouldUnregister\r\n        ? {}\r\n        : cloneObject(_defaultValues);\r\n    let _stateFlags = {\r\n        action: false,\r\n        mount: false,\r\n        watch: false,\r\n    };\r\n    let _names = {\r\n        mount: new Set(),\r\n        unMount: new Set(),\r\n        array: new Set(),\r\n        watch: new Set(),\r\n    };\r\n    let delayErrorCallback;\r\n    let timer = 0;\r\n    let validateFields = {};\r\n    const _proxyFormState = {\r\n        isDirty: false,\r\n        dirtyFields: false,\r\n        touchedFields: false,\r\n        isValidating: false,\r\n        isValid: false,\r\n        errors: false,\r\n    };\r\n    const _subjects = {\r\n        watch: createSubject(),\r\n        array: createSubject(),\r\n        state: createSubject(),\r\n    };\r\n    const validationModeBeforeSubmit = getValidationModes(_options.mode);\r\n    const validationModeAfterSubmit = getValidationModes(_options.reValidateMode);\r\n    const shouldDisplayAllAssociatedErrors = _options.criteriaMode === VALIDATION_MODE.all;\r\n    const debounce = (callback) => (wait) => {\r\n        clearTimeout(timer);\r\n        timer = window.setTimeout(callback, wait);\r\n    };\r\n    const _updateValid = async (shouldSkipRender) => {\r\n        let isValid = false;\r\n        if (_proxyFormState.isValid) {\r\n            isValid = _options.resolver\r\n                ? isEmptyObject((await _executeSchema()).errors)\r\n                : await executeBuiltInValidation(_fields, true);\r\n            if (!shouldSkipRender && isValid !== _formState.isValid) {\r\n                _formState.isValid = isValid;\r\n                _subjects.state.next({\r\n                    isValid,\r\n                });\r\n            }\r\n        }\r\n        return isValid;\r\n    };\r\n    const _updateFieldArray = (name, values = [], method, args, shouldSetValues = true, shouldUpdateFieldsAndState = true) => {\r\n        if (args && method) {\r\n            _stateFlags.action = true;\r\n            if (shouldUpdateFieldsAndState && Array.isArray(get(_fields, name))) {\r\n                const fieldValues = method(get(_fields, name), args.argA, args.argB);\r\n                shouldSetValues && set(_fields, name, fieldValues);\r\n            }\r\n            if (_proxyFormState.errors &&\r\n                shouldUpdateFieldsAndState &&\r\n                Array.isArray(get(_formState.errors, name))) {\r\n                const errors = method(get(_formState.errors, name), args.argA, args.argB);\r\n                shouldSetValues && set(_formState.errors, name, errors);\r\n                unsetEmptyArray(_formState.errors, name);\r\n            }\r\n            if (_proxyFormState.touchedFields &&\r\n                shouldUpdateFieldsAndState &&\r\n                Array.isArray(get(_formState.touchedFields, name))) {\r\n                const touchedFields = method(get(_formState.touchedFields, name), args.argA, args.argB);\r\n                shouldSetValues && set(_formState.touchedFields, name, touchedFields);\r\n            }\r\n            if (_proxyFormState.dirtyFields) {\r\n                _formState.dirtyFields = getDirtyFields(_defaultValues, _formValues);\r\n            }\r\n            _subjects.state.next({\r\n                isDirty: _getDirty(name, values),\r\n                dirtyFields: _formState.dirtyFields,\r\n                errors: _formState.errors,\r\n                isValid: _formState.isValid,\r\n            });\r\n        }\r\n        else {\r\n            set(_formValues, name, values);\r\n        }\r\n    };\r\n    const updateErrors = (name, error) => {\r\n        set(_formState.errors, name, error);\r\n        _subjects.state.next({\r\n            errors: _formState.errors,\r\n        });\r\n    };\r\n    const updateValidAndValue = (name, shouldSkipSetValueAs, value, ref) => {\r\n        const field = get(_fields, name);\r\n        if (field) {\r\n            const defaultValue = get(_formValues, name, isUndefined(value) ? get(_defaultValues, name) : value);\r\n            isUndefined(defaultValue) ||\r\n                (ref && ref.defaultChecked) ||\r\n                shouldSkipSetValueAs\r\n                ? set(_formValues, name, shouldSkipSetValueAs ? defaultValue : getFieldValue(field._f))\r\n                : setFieldValue(name, defaultValue);\r\n            _stateFlags.mount && _updateValid();\r\n        }\r\n    };\r\n    const updateTouchAndDirty = (name, fieldValue, isBlurEvent, shouldDirty, shouldRender) => {\r\n        let isFieldDirty = false;\r\n        const output = {\r\n            name,\r\n        };\r\n        const isPreviousFieldTouched = get(_formState.touchedFields, name);\r\n        if (_proxyFormState.isDirty) {\r\n            const isPreviousFormDirty = _formState.isDirty;\r\n            _formState.isDirty = output.isDirty = _getDirty();\r\n            isFieldDirty = isPreviousFormDirty !== output.isDirty;\r\n        }\r\n        if (_proxyFormState.dirtyFields && (!isBlurEvent || shouldDirty)) {\r\n            const isPreviousFieldDirty = get(_formState.dirtyFields, name);\r\n            const isCurrentFieldPristine = deepEqual(get(_defaultValues, name), fieldValue);\r\n            isCurrentFieldPristine\r\n                ? unset(_formState.dirtyFields, name)\r\n                : set(_formState.dirtyFields, name, true);\r\n            output.dirtyFields = _formState.dirtyFields;\r\n            isFieldDirty =\r\n                isFieldDirty ||\r\n                    isPreviousFieldDirty !== get(_formState.dirtyFields, name);\r\n        }\r\n        if (isBlurEvent && !isPreviousFieldTouched) {\r\n            set(_formState.touchedFields, name, isBlurEvent);\r\n            output.touchedFields = _formState.touchedFields;\r\n            isFieldDirty =\r\n                isFieldDirty ||\r\n                    (_proxyFormState.touchedFields &&\r\n                        isPreviousFieldTouched !== isBlurEvent);\r\n        }\r\n        isFieldDirty && shouldRender && _subjects.state.next(output);\r\n        return isFieldDirty ? output : {};\r\n    };\r\n    const shouldRenderByError = async (name, isValid, error, fieldState) => {\r\n        const previousFieldError = get(_formState.errors, name);\r\n        const shouldUpdateValid = _proxyFormState.isValid && _formState.isValid !== isValid;\r\n        if (props.delayError && error) {\r\n            delayErrorCallback = debounce(() => updateErrors(name, error));\r\n            delayErrorCallback(props.delayError);\r\n        }\r\n        else {\r\n            clearTimeout(timer);\r\n            delayErrorCallback = null;\r\n            error\r\n                ? set(_formState.errors, name, error)\r\n                : unset(_formState.errors, name);\r\n        }\r\n        if ((error ? !deepEqual(previousFieldError, error) : previousFieldError) ||\r\n            !isEmptyObject(fieldState) ||\r\n            shouldUpdateValid) {\r\n            const updatedFormState = {\r\n                ...fieldState,\r\n                ...(shouldUpdateValid ? { isValid } : {}),\r\n                errors: _formState.errors,\r\n                name,\r\n            };\r\n            _formState = {\r\n                ..._formState,\r\n                ...updatedFormState,\r\n            };\r\n            _subjects.state.next(updatedFormState);\r\n        }\r\n        validateFields[name]--;\r\n        if (_proxyFormState.isValidating &&\r\n            !Object.values(validateFields).some((v) => v)) {\r\n            _subjects.state.next({\r\n                isValidating: false,\r\n            });\r\n            validateFields = {};\r\n        }\r\n    };\r\n    const _executeSchema = async (name) => _options.resolver\r\n        ? await _options.resolver({ ..._formValues }, _options.context, getResolverOptions(name || _names.mount, _fields, _options.criteriaMode, _options.shouldUseNativeValidation))\r\n        : {};\r\n    const executeSchemaAndUpdateState = async (names) => {\r\n        const { errors } = await _executeSchema();\r\n        if (names) {\r\n            for (const name of names) {\r\n                const error = get(errors, name);\r\n                error\r\n                    ? set(_formState.errors, name, error)\r\n                    : unset(_formState.errors, name);\r\n            }\r\n        }\r\n        else {\r\n            _formState.errors = errors;\r\n        }\r\n        return errors;\r\n    };\r\n    const executeBuiltInValidation = async (fields, shouldOnlyCheckValid, context = {\r\n        valid: true,\r\n    }) => {\r\n        for (const name in fields) {\r\n            const field = fields[name];\r\n            if (field) {\r\n                const { _f, ...fieldValue } = field;\r\n                if (_f) {\r\n                    const isFieldArrayRoot = _names.array.has(_f.name);\r\n                    const fieldError = await validateField(field, get(_formValues, _f.name), shouldDisplayAllAssociatedErrors, _options.shouldUseNativeValidation, isFieldArrayRoot);\r\n                    if (fieldError[_f.name]) {\r\n                        context.valid = false;\r\n                        if (shouldOnlyCheckValid) {\r\n                            break;\r\n                        }\r\n                    }\r\n                    !shouldOnlyCheckValid &&\r\n                        (get(fieldError, _f.name)\r\n                            ? isFieldArrayRoot\r\n                                ? updateFieldArrayRootError(_formState.errors, fieldError, _f.name)\r\n                                : set(_formState.errors, _f.name, fieldError[_f.name])\r\n                            : unset(_formState.errors, _f.name));\r\n                }\r\n                fieldValue &&\r\n                    (await executeBuiltInValidation(fieldValue, shouldOnlyCheckValid, context));\r\n            }\r\n        }\r\n        return context.valid;\r\n    };\r\n    const _removeUnmounted = () => {\r\n        for (const name of _names.unMount) {\r\n            const field = get(_fields, name);\r\n            field &&\r\n                (field._f.refs\r\n                    ? field._f.refs.every((ref) => !live(ref))\r\n                    : !live(field._f.ref)) &&\r\n                unregister(name);\r\n        }\r\n        _names.unMount = new Set();\r\n    };\r\n    const _getDirty = (name, data) => (name && data && set(_formValues, name, data),\r\n        !deepEqual(getValues(), _defaultValues));\r\n    const _getWatch = (names, defaultValue, isGlobal) => {\r\n        const fieldValues = {\r\n            ...(_stateFlags.mount\r\n                ? _formValues\r\n                : isUndefined(defaultValue)\r\n                    ? _defaultValues\r\n                    : isString(names)\r\n                        ? { [names]: defaultValue }\r\n                        : defaultValue),\r\n        };\r\n        return generateWatchOutput(names, _names, fieldValues, isGlobal);\r\n    };\r\n    const _getFieldArray = (name) => compact(get(_stateFlags.mount ? _formValues : _defaultValues, name, props.shouldUnregister ? get(_defaultValues, name, []) : []));\r\n    const setFieldValue = (name, value, options = {}) => {\r\n        const field = get(_fields, name);\r\n        let fieldValue = value;\r\n        if (field) {\r\n            const fieldReference = field._f;\r\n            if (fieldReference) {\r\n                !fieldReference.disabled &&\r\n                    set(_formValues, name, getFieldValueAs(value, fieldReference));\r\n                fieldValue =\r\n                    isWeb && isHTMLElement(fieldReference.ref) && isNullOrUndefined(value)\r\n                        ? ''\r\n                        : value;\r\n                if (isMultipleSelect(fieldReference.ref)) {\r\n                    [...fieldReference.ref.options].forEach((selectRef) => (selectRef.selected = fieldValue.includes(selectRef.value)));\r\n                }\r\n                else if (fieldReference.refs) {\r\n                    if (isCheckBoxInput(fieldReference.ref)) {\r\n                        fieldReference.refs.length > 1\r\n                            ? fieldReference.refs.forEach((checkboxRef) => !checkboxRef.disabled &&\r\n                                (checkboxRef.checked = Array.isArray(fieldValue)\r\n                                    ? !!fieldValue.find((data) => data === checkboxRef.value)\r\n                                    : fieldValue === checkboxRef.value))\r\n                            : fieldReference.refs[0] &&\r\n                                (fieldReference.refs[0].checked = !!fieldValue);\r\n                    }\r\n                    else {\r\n                        fieldReference.refs.forEach((radioRef) => (radioRef.checked = radioRef.value === fieldValue));\r\n                    }\r\n                }\r\n                else if (isFileInput(fieldReference.ref)) {\r\n                    fieldReference.ref.value = '';\r\n                }\r\n                else {\r\n                    fieldReference.ref.value = fieldValue;\r\n                    if (!fieldReference.ref.type) {\r\n                        _subjects.watch.next({\r\n                            name,\r\n                        });\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        (options.shouldDirty || options.shouldTouch) &&\r\n            updateTouchAndDirty(name, fieldValue, options.shouldTouch, options.shouldDirty, true);\r\n        options.shouldValidate && trigger(name);\r\n    };\r\n    const setValues = (name, value, options) => {\r\n        for (const fieldKey in value) {\r\n            const fieldValue = value[fieldKey];\r\n            const fieldName = `${name}.${fieldKey}`;\r\n            const field = get(_fields, fieldName);\r\n            (_names.array.has(name) ||\r\n                !isPrimitive(fieldValue) ||\r\n                (field && !field._f)) &&\r\n                !isDateObject(fieldValue)\r\n                ? setValues(fieldName, fieldValue, options)\r\n                : setFieldValue(fieldName, fieldValue, options);\r\n        }\r\n    };\r\n    const setValue = (name, value, options = {}) => {\r\n        const field = get(_fields, name);\r\n        const isFieldArray = _names.array.has(name);\r\n        const cloneValue = cloneObject(value);\r\n        set(_formValues, name, cloneValue);\r\n        if (isFieldArray) {\r\n            _subjects.array.next({\r\n                name,\r\n                values: _formValues,\r\n            });\r\n            if ((_proxyFormState.isDirty || _proxyFormState.dirtyFields) &&\r\n                options.shouldDirty) {\r\n                _formState.dirtyFields = getDirtyFields(_defaultValues, _formValues);\r\n                _subjects.state.next({\r\n                    name,\r\n                    dirtyFields: _formState.dirtyFields,\r\n                    isDirty: _getDirty(name, cloneValue),\r\n                });\r\n            }\r\n        }\r\n        else {\r\n            field && !field._f && !isNullOrUndefined(cloneValue)\r\n                ? setValues(name, cloneValue, options)\r\n                : setFieldValue(name, cloneValue, options);\r\n        }\r\n        isWatched(name, _names) && _subjects.state.next({});\r\n        _subjects.watch.next({\r\n            name,\r\n        });\r\n    };\r\n    const onChange = async (event) => {\r\n        const target = event.target;\r\n        let name = target.name;\r\n        const field = get(_fields, name);\r\n        if (field) {\r\n            let error;\r\n            let isValid;\r\n            const fieldValue = target.type\r\n                ? getFieldValue(field._f)\r\n                : getEventValue(event);\r\n            const isBlurEvent = event.type === EVENTS.BLUR || event.type === EVENTS.FOCUS_OUT;\r\n            const shouldSkipValidation = (!hasValidation(field._f) &&\r\n                !_options.resolver &&\r\n                !get(_formState.errors, name) &&\r\n                !field._f.deps) ||\r\n                skipValidation(isBlurEvent, get(_formState.touchedFields, name), _formState.isSubmitted, validationModeAfterSubmit, validationModeBeforeSubmit);\r\n            const watched = isWatched(name, _names, isBlurEvent);\r\n            set(_formValues, name, fieldValue);\r\n            if (isBlurEvent) {\r\n                field._f.onBlur && field._f.onBlur(event);\r\n                delayErrorCallback && delayErrorCallback(0);\r\n            }\r\n            else if (field._f.onChange) {\r\n                field._f.onChange(event);\r\n            }\r\n            const fieldState = updateTouchAndDirty(name, fieldValue, isBlurEvent, false);\r\n            const shouldRender = !isEmptyObject(fieldState) || watched;\r\n            !isBlurEvent &&\r\n                _subjects.watch.next({\r\n                    name,\r\n                    type: event.type,\r\n                });\r\n            if (shouldSkipValidation) {\r\n                return (shouldRender &&\r\n                    _subjects.state.next({ name, ...(watched ? {} : fieldState) }));\r\n            }\r\n            !isBlurEvent && watched && _subjects.state.next({});\r\n            validateFields[name] = validateFields[name] ? +1 : 1;\r\n            _subjects.state.next({\r\n                isValidating: true,\r\n            });\r\n            if (_options.resolver) {\r\n                const { errors } = await _executeSchema([name]);\r\n                const previousErrorLookupResult = schemaErrorLookup(_formState.errors, _fields, name);\r\n                const errorLookupResult = schemaErrorLookup(errors, _fields, previousErrorLookupResult.name || name);\r\n                error = errorLookupResult.error;\r\n                name = errorLookupResult.name;\r\n                isValid = isEmptyObject(errors);\r\n            }\r\n            else {\r\n                error = (await validateField(field, get(_formValues, name), shouldDisplayAllAssociatedErrors, _options.shouldUseNativeValidation))[name];\r\n                isValid = await _updateValid(true);\r\n            }\r\n            field._f.deps &&\r\n                trigger(field._f.deps);\r\n            shouldRenderByError(name, isValid, error, fieldState);\r\n        }\r\n    };\r\n    const trigger = async (name, options = {}) => {\r\n        let isValid;\r\n        let validationResult;\r\n        const fieldNames = convertToArrayPayload(name);\r\n        _subjects.state.next({\r\n            isValidating: true,\r\n        });\r\n        if (_options.resolver) {\r\n            const errors = await executeSchemaAndUpdateState(isUndefined(name) ? name : fieldNames);\r\n            isValid = isEmptyObject(errors);\r\n            validationResult = name\r\n                ? !fieldNames.some((name) => get(errors, name))\r\n                : isValid;\r\n        }\r\n        else if (name) {\r\n            validationResult = (await Promise.all(fieldNames.map(async (fieldName) => {\r\n                const field = get(_fields, fieldName);\r\n                return await executeBuiltInValidation(field && field._f ? { [fieldName]: field } : field);\r\n            }))).every(Boolean);\r\n            !(!validationResult && !_formState.isValid) && _updateValid();\r\n        }\r\n        else {\r\n            validationResult = isValid = await executeBuiltInValidation(_fields);\r\n        }\r\n        _subjects.state.next({\r\n            ...(!isString(name) ||\r\n                (_proxyFormState.isValid && isValid !== _formState.isValid)\r\n                ? {}\r\n                : { name }),\r\n            ...(_options.resolver ? { isValid } : {}),\r\n            errors: _formState.errors,\r\n            isValidating: false,\r\n        });\r\n        options.shouldFocus &&\r\n            !validationResult &&\r\n            focusFieldBy(_fields, (key) => get(_formState.errors, key), name ? fieldNames : _names.mount);\r\n        return validationResult;\r\n    };\r\n    const getValues = (fieldNames) => {\r\n        const values = {\r\n            ..._defaultValues,\r\n            ...(_stateFlags.mount ? _formValues : {}),\r\n        };\r\n        return isUndefined(fieldNames)\r\n            ? values\r\n            : isString(fieldNames)\r\n                ? get(values, fieldNames)\r\n                : fieldNames.map((name) => get(values, name));\r\n    };\r\n    const getFieldState = (name, formState) => ({\r\n        invalid: !!get((formState || _formState).errors, name),\r\n        isDirty: !!get((formState || _formState).dirtyFields, name),\r\n        isTouched: !!get((formState || _formState).touchedFields, name),\r\n        error: get((formState || _formState).errors, name),\r\n    });\r\n    const clearErrors = (name) => {\r\n        name\r\n            ? convertToArrayPayload(name).forEach((inputName) => unset(_formState.errors, inputName))\r\n            : (_formState.errors = {});\r\n        _subjects.state.next({\r\n            errors: _formState.errors,\r\n        });\r\n    };\r\n    const setError = (name, error, options) => {\r\n        const ref = (get(_fields, name, { _f: {} })._f || {}).ref;\r\n        set(_formState.errors, name, {\r\n            ...error,\r\n            ref,\r\n        });\r\n        _subjects.state.next({\r\n            name,\r\n            errors: _formState.errors,\r\n            isValid: false,\r\n        });\r\n        options && options.shouldFocus && ref && ref.focus && ref.focus();\r\n    };\r\n    const watch = (name, defaultValue) => isFunction(name)\r\n        ? _subjects.watch.subscribe({\r\n            next: (info) => name(_getWatch(undefined, defaultValue), info),\r\n        })\r\n        : _getWatch(name, defaultValue, true);\r\n    const unregister = (name, options = {}) => {\r\n        for (const fieldName of name ? convertToArrayPayload(name) : _names.mount) {\r\n            _names.mount.delete(fieldName);\r\n            _names.array.delete(fieldName);\r\n            if (get(_fields, fieldName)) {\r\n                if (!options.keepValue) {\r\n                    unset(_fields, fieldName);\r\n                    unset(_formValues, fieldName);\r\n                }\r\n                !options.keepError && unset(_formState.errors, fieldName);\r\n                !options.keepDirty && unset(_formState.dirtyFields, fieldName);\r\n                !options.keepTouched && unset(_formState.touchedFields, fieldName);\r\n                !_options.shouldUnregister &&\r\n                    !options.keepDefaultValue &&\r\n                    unset(_defaultValues, fieldName);\r\n            }\r\n        }\r\n        _subjects.watch.next({});\r\n        _subjects.state.next({\r\n            ..._formState,\r\n            ...(!options.keepDirty ? {} : { isDirty: _getDirty() }),\r\n        });\r\n        !options.keepIsValid && _updateValid();\r\n    };\r\n    const register = (name, options = {}) => {\r\n        let field = get(_fields, name);\r\n        const disabledIsDefined = isBoolean(options.disabled);\r\n        set(_fields, name, {\r\n            _f: {\r\n                ...(field && field._f ? field._f : { ref: { name } }),\r\n                name,\r\n                mount: true,\r\n                ...options,\r\n            },\r\n        });\r\n        _names.mount.add(name);\r\n        field\r\n            ? disabledIsDefined &&\r\n                set(_formValues, name, options.disabled\r\n                    ? undefined\r\n                    : get(_formValues, name, getFieldValue(field._f)))\r\n            : updateValidAndValue(name, true, options.value);\r\n        return {\r\n            ...(disabledIsDefined ? { disabled: options.disabled } : {}),\r\n            ...(_options.shouldUseNativeValidation\r\n                ? {\r\n                    required: !!options.required,\r\n                    min: getRuleValue(options.min),\r\n                    max: getRuleValue(options.max),\r\n                    minLength: getRuleValue(options.minLength),\r\n                    maxLength: getRuleValue(options.maxLength),\r\n                    pattern: getRuleValue(options.pattern),\r\n                }\r\n                : {}),\r\n            name,\r\n            onChange,\r\n            onBlur: onChange,\r\n            ref: (ref) => {\r\n                if (ref) {\r\n                    register(name, options);\r\n                    field = get(_fields, name);\r\n                    const fieldRef = isUndefined(ref.value)\r\n                        ? ref.querySelectorAll\r\n                            ? ref.querySelectorAll('input,select,textarea')[0] || ref\r\n                            : ref\r\n                        : ref;\r\n                    const radioOrCheckbox = isRadioOrCheckbox(fieldRef);\r\n                    const refs = field._f.refs || [];\r\n                    if (radioOrCheckbox\r\n                        ? refs.find((option) => option === fieldRef)\r\n                        : fieldRef === field._f.ref) {\r\n                        return;\r\n                    }\r\n                    set(_fields, name, {\r\n                        _f: {\r\n                            ...field._f,\r\n                            ...(radioOrCheckbox\r\n                                ? {\r\n                                    refs: [\r\n                                        ...refs.filter(live),\r\n                                        fieldRef,\r\n                                        ...(!!Array.isArray(get(_defaultValues, name))\r\n                                            ? [{}]\r\n                                            : []),\r\n                                    ],\r\n                                    ref: { type: fieldRef.type, name },\r\n                                }\r\n                                : { ref: fieldRef }),\r\n                        },\r\n                    });\r\n                    updateValidAndValue(name, false, undefined, fieldRef);\r\n                }\r\n                else {\r\n                    field = get(_fields, name, {});\r\n                    if (field._f) {\r\n                        field._f.mount = false;\r\n                    }\r\n                    (_options.shouldUnregister || options.shouldUnregister) &&\r\n                        !(isNameInFieldArray(_names.array, name) && _stateFlags.action) &&\r\n                        _names.unMount.add(name);\r\n                }\r\n            },\r\n        };\r\n    };\r\n    const handleSubmit = (onValid, onInvalid) => async (e) => {\r\n        if (e) {\r\n            e.preventDefault && e.preventDefault();\r\n            e.persist && e.persist();\r\n        }\r\n        let hasNoPromiseError = true;\r\n        let fieldValues = cloneObject(_formValues);\r\n        _subjects.state.next({\r\n            isSubmitting: true,\r\n        });\r\n        try {\r\n            if (_options.resolver) {\r\n                const { errors, values } = await _executeSchema();\r\n                _formState.errors = errors;\r\n                fieldValues = values;\r\n            }\r\n            else {\r\n                await executeBuiltInValidation(_fields);\r\n            }\r\n            if (isEmptyObject(_formState.errors)) {\r\n                _subjects.state.next({\r\n                    errors: {},\r\n                    isSubmitting: true,\r\n                });\r\n                await onValid(fieldValues, e);\r\n            }\r\n            else {\r\n                if (onInvalid) {\r\n                    await onInvalid({ ..._formState.errors }, e);\r\n                }\r\n                _options.shouldFocusError &&\r\n                    focusFieldBy(_fields, (key) => get(_formState.errors, key), _names.mount);\r\n            }\r\n        }\r\n        catch (err) {\r\n            hasNoPromiseError = false;\r\n            throw err;\r\n        }\r\n        finally {\r\n            _formState.isSubmitted = true;\r\n            _subjects.state.next({\r\n                isSubmitted: true,\r\n                isSubmitting: false,\r\n                isSubmitSuccessful: isEmptyObject(_formState.errors) && hasNoPromiseError,\r\n                submitCount: _formState.submitCount + 1,\r\n                errors: _formState.errors,\r\n            });\r\n        }\r\n    };\r\n    const resetField = (name, options = {}) => {\r\n        if (get(_fields, name)) {\r\n            if (isUndefined(options.defaultValue)) {\r\n                setValue(name, get(_defaultValues, name));\r\n            }\r\n            else {\r\n                setValue(name, options.defaultValue);\r\n                set(_defaultValues, name, options.defaultValue);\r\n            }\r\n            if (!options.keepTouched) {\r\n                unset(_formState.touchedFields, name);\r\n            }\r\n            if (!options.keepDirty) {\r\n                unset(_formState.dirtyFields, name);\r\n                _formState.isDirty = options.defaultValue\r\n                    ? _getDirty(name, get(_defaultValues, name))\r\n                    : _getDirty();\r\n            }\r\n            if (!options.keepError) {\r\n                unset(_formState.errors, name);\r\n                _proxyFormState.isValid && _updateValid();\r\n            }\r\n            _subjects.state.next({ ..._formState });\r\n        }\r\n    };\r\n    const reset = (formValues, keepStateOptions = {}) => {\r\n        const updatedValues = formValues || _defaultValues;\r\n        const cloneUpdatedValues = cloneObject(updatedValues);\r\n        const values = formValues && !isEmptyObject(formValues)\r\n            ? cloneUpdatedValues\r\n            : _defaultValues;\r\n        if (!keepStateOptions.keepDefaultValues) {\r\n            _defaultValues = updatedValues;\r\n        }\r\n        if (!keepStateOptions.keepValues) {\r\n            if (keepStateOptions.keepDirtyValues) {\r\n                for (const fieldName of _names.mount) {\r\n                    get(_formState.dirtyFields, fieldName)\r\n                        ? set(values, fieldName, get(_formValues, fieldName))\r\n                        : setValue(fieldName, get(values, fieldName));\r\n                }\r\n            }\r\n            else {\r\n                if (isWeb && isUndefined(formValues)) {\r\n                    for (const name of _names.mount) {\r\n                        const field = get(_fields, name);\r\n                        if (field && field._f) {\r\n                            const fieldReference = Array.isArray(field._f.refs)\r\n                                ? field._f.refs[0]\r\n                                : field._f.ref;\r\n                            try {\r\n                                if (isHTMLElement(fieldReference)) {\r\n                                    fieldReference.closest('form').reset();\r\n                                    break;\r\n                                }\r\n                            }\r\n                            catch (_a) { }\r\n                        }\r\n                    }\r\n                }\r\n                _fields = {};\r\n            }\r\n            _formValues = props.shouldUnregister\r\n                ? keepStateOptions.keepDefaultValues\r\n                    ? cloneObject(_defaultValues)\r\n                    : {}\r\n                : cloneUpdatedValues;\r\n            _subjects.array.next({\r\n                values,\r\n            });\r\n            _subjects.watch.next({\r\n                values,\r\n            });\r\n        }\r\n        _names = {\r\n            mount: new Set(),\r\n            unMount: new Set(),\r\n            array: new Set(),\r\n            watch: new Set(),\r\n            watchAll: false,\r\n            focus: '',\r\n        };\r\n        _stateFlags.mount =\r\n            !_proxyFormState.isValid || !!keepStateOptions.keepIsValid;\r\n        _stateFlags.watch = !!props.shouldUnregister;\r\n        _subjects.state.next({\r\n            submitCount: keepStateOptions.keepSubmitCount\r\n                ? _formState.submitCount\r\n                : 0,\r\n            isDirty: keepStateOptions.keepDirty || keepStateOptions.keepDirtyValues\r\n                ? _formState.isDirty\r\n                : !!(keepStateOptions.keepDefaultValues &&\r\n                    !deepEqual(formValues, _defaultValues)),\r\n            isSubmitted: keepStateOptions.keepIsSubmitted\r\n                ? _formState.isSubmitted\r\n                : false,\r\n            dirtyFields: keepStateOptions.keepDirty || keepStateOptions.keepDirtyValues\r\n                ? _formState.dirtyFields\r\n                : keepStateOptions.keepDefaultValues && formValues\r\n                    ? getDirtyFields(_defaultValues, formValues)\r\n                    : {},\r\n            touchedFields: keepStateOptions.keepTouched\r\n                ? _formState.touchedFields\r\n                : {},\r\n            errors: keepStateOptions.keepErrors\r\n                ? _formState.errors\r\n                : {},\r\n            isSubmitting: false,\r\n            isSubmitSuccessful: false,\r\n        });\r\n    };\r\n    const setFocus = (name, options = {}) => {\r\n        const field = get(_fields, name)._f;\r\n        const fieldRef = field.refs ? field.refs[0] : field.ref;\r\n        fieldRef.focus();\r\n        options.shouldSelect && fieldRef.select();\r\n    };\r\n    return {\r\n        control: {\r\n            register,\r\n            unregister,\r\n            getFieldState,\r\n            _executeSchema,\r\n            _getWatch,\r\n            _getDirty,\r\n            _updateValid,\r\n            _removeUnmounted,\r\n            _updateFieldArray,\r\n            _getFieldArray,\r\n            _subjects,\r\n            _proxyFormState,\r\n            get _fields() {\r\n                return _fields;\r\n            },\r\n            get _formValues() {\r\n                return _formValues;\r\n            },\r\n            get _stateFlags() {\r\n                return _stateFlags;\r\n            },\r\n            set _stateFlags(value) {\r\n                _stateFlags = value;\r\n            },\r\n            get _defaultValues() {\r\n                return _defaultValues;\r\n            },\r\n            get _names() {\r\n                return _names;\r\n            },\r\n            set _names(value) {\r\n                _names = value;\r\n            },\r\n            get _formState() {\r\n                return _formState;\r\n            },\r\n            set _formState(value) {\r\n                _formState = value;\r\n            },\r\n            get _options() {\r\n                return _options;\r\n            },\r\n            set _options(value) {\r\n                _options = {\r\n                    ..._options,\r\n                    ...value,\r\n                };\r\n            },\r\n        },\r\n        trigger,\r\n        register,\r\n        handleSubmit,\r\n        watch,\r\n        setValue,\r\n        getValues,\r\n        reset,\r\n        resetField,\r\n        clearErrors,\r\n        unregister,\r\n        setError,\r\n        setFocus,\r\n        getFieldState,\r\n    };\r\n}\n\n/**\r\n * Custom hook to manage the entire form.\r\n *\r\n * @remarks\r\n * [API](https://react-hook-form.com/api/useform) • [Demo](https://codesandbox.io/s/react-hook-form-get-started-ts-5ksmm) • [Video](https://www.youtube.com/watch?v=RkXv4AXXC_4)\r\n *\r\n * @param props - form configuration and validation parameters.\r\n *\r\n * @returns methods - individual functions to manage the form state. {@link UseFormReturn}\r\n *\r\n * @example\r\n * ```tsx\r\n * function App() {\r\n *   const { register, handleSubmit, watch, formState: { errors } } = useForm();\r\n *   const onSubmit = data => console.log(data);\r\n *\r\n *   console.log(watch(\"example\"));\r\n *\r\n *   return (\r\n *     <form onSubmit={handleSubmit(onSubmit)}>\r\n *       <input defaultValue=\"test\" {...register(\"example\")} />\r\n *       <input {...register(\"exampleRequired\", { required: true })} />\r\n *       {errors.exampleRequired && <span>This field is required</span>}\r\n *       <input type=\"submit\" />\r\n *     </form>\r\n *   );\r\n * }\r\n * ```\r\n */\r\nfunction useForm(props = {}) {\r\n    const _formControl = React.useRef();\r\n    const [formState, updateFormState] = React.useState({\r\n        isDirty: false,\r\n        isValidating: false,\r\n        dirtyFields: {},\r\n        isSubmitted: false,\r\n        submitCount: 0,\r\n        touchedFields: {},\r\n        isSubmitting: false,\r\n        isSubmitSuccessful: false,\r\n        isValid: false,\r\n        errors: {},\r\n    });\r\n    if (_formControl.current) {\r\n        _formControl.current.control._options = props;\r\n    }\r\n    else {\r\n        _formControl.current = {\r\n            ...createFormControl(props),\r\n            formState,\r\n        };\r\n    }\r\n    const control = _formControl.current.control;\r\n    const callback = React.useCallback((value) => {\r\n        if (shouldRenderFormState(value, control._proxyFormState, true)) {\r\n            control._formState = {\r\n                ...control._formState,\r\n                ...value,\r\n            };\r\n            updateFormState({ ...control._formState });\r\n        }\r\n    }, [control]);\r\n    useSubscribe({\r\n        subject: control._subjects.state,\r\n        callback,\r\n    });\r\n    React.useEffect(() => {\r\n        if (!control._stateFlags.mount) {\r\n            control._proxyFormState.isValid && control._updateValid();\r\n            control._stateFlags.mount = true;\r\n        }\r\n        if (control._stateFlags.watch) {\r\n            control._stateFlags.watch = false;\r\n            control._subjects.state.next({});\r\n        }\r\n        control._removeUnmounted();\r\n    });\r\n    _formControl.current.formState = getProxyFormState(formState, control._proxyFormState);\r\n    return _formControl.current;\r\n}\n\nexport { Controller, FormProvider, appendErrors, get, set, useController, useFieldArray, useForm, useFormContext, useFormState, useWatch };\n//# sourceMappingURL=index.esm.mjs.map\n","import { StoryObj } from \"@storybook/react\";\nimport { useForm, Controller } from \"react-hook-form\";\nimport { RichTextarea } from \"../../src\";\n\nexport default {\n  component: RichTextarea,\n};\n\nconst style = { width: \"600px\", height: \"400px\" };\n\nexport const WithReactHookForm: StoryObj = {\n  render: () => {\n    const {\n      handleSubmit,\n      control,\n      formState: { errors },\n    } = useForm();\n    return (\n      <form onSubmit={handleSubmit((data) => alert(JSON.stringify(data)))}>\n        <Controller\n          defaultValue=\"Hello react-hook-form\"\n          control={control}\n          name=\"text\"\n          rules={{\n            required: true,\n            validate: (v) => v.toLowerCase().includes(\"hook\"),\n          }}\n          render={({ field: { ref, onChange, onBlur, value } }) => (\n            <RichTextarea\n              ref={ref}\n              value={value}\n              style={style}\n              onChange={onChange}\n              onBlur={onBlur}\n            >\n              {(v) => {\n                return v.split(\"\").map((t, i) => (\n                  <span\n                    key={i}\n                    style={{\n                      color: \"hook\".includes(t.toLowerCase())\n                        ? \"violet\"\n                        : undefined,\n                    }}\n                  >\n                    {t}\n                  </span>\n                ));\n              }}\n            </RichTextarea>\n          )}\n        />\n        {errors.text?.type === \"required\" && (\n          <span style={{ color: \"red\" }}>This field is required</span>\n        )}\n        {errors.text?.type === \"validate\" && (\n          <span style={{ color: \"red\" }}>Text must include hook</span>\n        )}\n        <button type=\"submit\">submit</button>\n      </form>\n    );\n  },\n};\n"],"names":["isCheckBoxInput","element","type","isDateObject","value","Date","isNullOrUndefined","isObjectType","isObject","Array","isArray","getEventValue","event","target","checked","getNodeParentName","name","substring","search","isNameInFieldArray","names","has","compact","filter","Boolean","isUndefined","val","undefined","get","obj","path","defaultValue","result","split","reduce","key","EVENTS","BLUR","FOCUS_OUT","CHANGE","VALIDATION_MODE","onBlur","onChange","onSubmit","onTouched","all","INPUT_VALIDATION_RULES","max","min","maxLength","minLength","pattern","required","validate","HookFormContext","React","createContext","useFormContext","useContext","getProxyFormState","formState","_proxyFormState","localProxyFormState","isRoot","Object","defineProperty","_key","isEmptyObject","keys","length","shouldRenderFormState","formStateData","find","convertToArrayPayload","shouldSubscribeByName","signalName","exact","some","currentName","startsWith","useSubscribe","props","_props","useRef","current","useEffect","tearDown","subscription","unsubscribe","disabled","subject","subscribe","next","callback","useFormState","methods","control","updateFormState","useState","_formState","_localProxyFormState","isDirty","dirtyFields","touchedFields","isValidating","isValid","errors","_name","_mounted","useCallback","_subjects","state","isString","generateWatchOutput","_names","formValues","isGlobal","watch","add","map","fieldName","watchAll","isFunction","objectHasFunction","data","useWatch","fieldValues","values","_formValues","updateValue","_getWatch","_removeUnmounted","useController","shouldUnregister","isArrayField","array","_defaultValues","_registerProps","register","rules","updateMounted","field","_fields","_f","mount","_shouldUnregisterField","_options","_stateFlags","action","unregister","ref","elm","focus","select","setCustomValidity","message","reportValidity","fieldState","defineProperties","invalid","isTouched","error","Controller","render","appendErrors","validateAllFieldCriteria","types","isKey","test","stringToPath","input","replace","set","object","index","tempPath","lastIndex","newValue","objValue","isNaN","focusFieldBy","fields","fieldsNames","currentField","refs","isWatched","isBlurEvent","watchName","slice","updateFieldArrayRootError","fieldArrayErrors","isBoolean","isFileInput","isMessage","isValidElement","isRadioInput","isRegex","RegExp","defaultResult","validResult","getCheckboxValue","options","option","attributes","defaultReturn","getRadioValue","previous","getValidateError","every","getValueAndMessage","validationData","validateField","inputValue","shouldUseNativeValidation","isFieldArray","valueAsNumber","inputRef","isRadio","isCheckBox","isRadioOrCheckbox","isEmpty","appendErrorsCurry","bind","getMinMaxMessage","exceedMax","maxLengthMessage","minLengthMessage","maxType","minType","exceedMin","maxOutput","minOutput","valueNumber","valueDate","valueAsDate","maxLengthOutput","minLengthOutput","patternValue","match","validateError","validationResult","isWeb","window","HTMLElement","document","cloneObject","copy","Set","Blob","FileList","getValidationModes","mode","isOnSubmit","isOnBlur","isOnChange","isOnAll","isOnTouch","baseGet","updatePath","isEmptyArray","unset","childObject","previousObjRef","k","objectRef","currentPaths","currentPathsLength","item","createSubject","_observers","observers","observer","push","o","isPrimitive","deepEqual","object1","object2","getTime","keys1","keys2","val1","includes","val2","isHTMLElement","owner","ownerDocument","ElementClass","defaultView","isMultipleSelect","live","isConnected","markFieldsDirty","isParentNodeArray","getDirtyFieldsFromDefaultValues","dirtyFieldsFromValues","getDirtyFields","defaultValues","getFieldValueAs","setValueAs","NaN","getFieldValue","files","selectedOptions","getResolverOptions","criteriaMode","getRuleValue","rule","source","hasValidation","schemaErrorLookup","join","foundError","pop","skipValidation","isSubmitted","reValidateMode","unsetEmptyArray","defaultOptions","shouldFocusError","createFormControl","submitCount","isSubmitting","isSubmitSuccessful","unMount","delayErrorCallback","timer","validateFields","validationModeBeforeSubmit","validationModeAfterSubmit","shouldDisplayAllAssociatedErrors","debounce","wait","clearTimeout","setTimeout","_updateValid","shouldSkipRender","resolver","_executeSchema","executeBuiltInValidation","_updateFieldArray","method","args","shouldSetValues","shouldUpdateFieldsAndState","argA","argB","_getDirty","updateErrors","updateValidAndValue","shouldSkipSetValueAs","defaultChecked","setFieldValue","updateTouchAndDirty","fieldValue","shouldDirty","shouldRender","isFieldDirty","output","isPreviousFieldTouched","isPreviousFormDirty","isPreviousFieldDirty","shouldRenderByError","previousFieldError","shouldUpdateValid","delayError","updatedFormState","v","context","executeSchemaAndUpdateState","shouldOnlyCheckValid","valid","isFieldArrayRoot","fieldError","getValues","_getFieldArray","fieldReference","forEach","selectRef","selected","checkboxRef","radioRef","shouldTouch","shouldValidate","trigger","setValues","fieldKey","setValue","cloneValue","shouldSkipValidation","deps","watched","previousErrorLookupResult","errorLookupResult","fieldNames","Promise","shouldFocus","getFieldState","clearErrors","inputName","setError","info","delete","keepValue","keepError","keepDirty","keepTouched","keepDefaultValue","keepIsValid","disabledIsDefined","fieldRef","querySelectorAll","radioOrCheckbox","handleSubmit","onValid","onInvalid","e","preventDefault","persist","hasNoPromiseError","err","reset","keepStateOptions","updatedValues","cloneUpdatedValues","keepDefaultValues","keepValues","keepDirtyValues","closest","keepSubmitCount","keepIsSubmitted","keepErrors","resetField","setFocus","shouldSelect","useForm","_formControl","WithReactHookForm_stories","component","RichTextarea","style","width","height","WithReactHookForm","alert","JSON","stringify","_jsx","toLowerCase","t","i","color","text"],"mappings":"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"}