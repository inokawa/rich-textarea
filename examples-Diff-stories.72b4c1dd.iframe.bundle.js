"use strict";(self.webpackChunkrich_textarea=self.webpackChunkrich_textarea||[]).push([[87],{"./stories/examples/Diff.stories.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{Diff:()=>Diff,__namedExportsOrder:()=>__namedExportsOrder,default:()=>__WEBPACK_DEFAULT_EXPORT__});var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/react/jsx-runtime.js"),react__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./node_modules/react/index.js"),_src__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./src/textarea.tsx"),monaco_diff__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__("./node_modules/monaco-diff/lib/index.mjs");function _array_like_to_array(arr,len){(null==len||len>arr.length)&&(len=arr.length);for(var i=0,arr2=Array(len);i<len;i++)arr2[i]=arr[i];return arr2}function _array_with_holes(arr){if(Array.isArray(arr))return arr}function _iterable_to_array_limit(arr,i){var _s,_e,_i=null==arr?null:"undefined"!=typeof Symbol&&arr[Symbol.iterator]||arr["@@iterator"];if(null!=_i){var _arr=[],_n=!0,_d=!1;try{for(_i=_i.call(arr);!(_n=(_s=_i.next()).done)&&(_arr.push(_s.value),!i||_arr.length!==i);_n=!0);}catch(err){_d=!0,_e=err}finally{try{_n||null==_i.return||_i.return()}finally{if(_d)throw _e}}return _arr}}function _non_iterable_rest(){throw TypeError("Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}function _sliced_to_array(arr,i){return _array_with_holes(arr)||_iterable_to_array_limit(arr,i)||_unsupported_iterable_to_array(arr,i)||_non_iterable_rest()}function _unsupported_iterable_to_array(o,minLen){if(o){if("string"==typeof o)return _array_like_to_array(o,minLen);var n=Object.prototype.toString.call(o).slice(8,-1);if("Object"===n&&o.constructor&&(n=o.constructor.name),"Map"===n||"Set"===n)return Array.from(n);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return _array_like_to_array(o,minLen)}}let __WEBPACK_DEFAULT_EXPORT__={parameters:{storySource:{source:'import type { StoryObj } from "@storybook/react";\nimport React, { useState, useMemo } from "react";\nimport { Renderer, RichTextarea } from "../../src";\nimport { diff, type ILineChange } from "monaco-diff";\n\nexport default {\n  component: RichTextarea,\n};\n\nconst style: React.CSSProperties = {\n  width: "300px",\n  height: "400px",\n};\n\nconst createDiffRenderer =\n  (tokens: ILineChange[], type: "base" | "target"): Renderer =>\n  (value) => {\n    const orgLines: ({ start?: number; end?: number }[] | undefined)[] =\n      Array.from({ length: value.length });\n    const modLines: ({ start?: number; end?: number }[] | undefined)[] =\n      Array.from({ length: value.length });\n    for (const token of tokens) {\n      for (\n        let i = token.originalStartLineNumber;\n        i <= token.originalEndLineNumber;\n        i++\n      ) {\n        orgLines[i - 1] || (orgLines[i - 1] = []);\n        if (token.modifiedEndLineNumber === 0) {\n          orgLines[i - 1]!.push({ start: undefined, end: undefined });\n        }\n      }\n      for (\n        let i = token.modifiedStartLineNumber;\n        i <= token.modifiedEndLineNumber;\n        i++\n      ) {\n        modLines[i - 1] || (modLines[i - 1] = []);\n        if (token.originalEndLineNumber === 0) {\n          modLines[i - 1]!.push({ start: undefined, end: undefined });\n        }\n      }\n\n      token.charChanges?.forEach((c) => {\n        for (\n          let i = c.originalStartLineNumber;\n          i <= c.originalEndLineNumber;\n          i++\n        ) {\n          if (i === c.originalStartLineNumber) {\n            if (c.originalStartLineNumber === c.originalEndLineNumber) {\n              (orgLines[i - 1] || (orgLines[i - 1] = [])).push({\n                start: c.originalStartColumn,\n                end: c.originalEndColumn,\n              });\n            } else {\n              (orgLines[i - 1] || (orgLines[i - 1] = [])).push({\n                start: c.originalStartColumn,\n                end: undefined,\n              });\n            }\n          } else if (i === c.originalEndLineNumber) {\n            (orgLines[i - 1] || (orgLines[i - 1] = [])).push({\n              start: undefined,\n              end: c.originalEndColumn,\n            });\n          } else {\n            (orgLines[i - 1] || (orgLines[i - 1] = [])).push({\n              start: undefined,\n              end: undefined,\n            });\n          }\n        }\n        for (\n          let i = c.modifiedStartLineNumber;\n          i <= c.modifiedEndLineNumber;\n          i++\n        ) {\n          if (i === c.modifiedStartLineNumber) {\n            if (c.modifiedStartLineNumber === c.modifiedEndLineNumber) {\n              (modLines[i - 1] || (modLines[i - 1] = [])).push({\n                start: c.modifiedStartColumn,\n                end: c.modifiedEndColumn,\n              });\n            } else {\n              (modLines[i - 1] || (modLines[i - 1] = [])).push({\n                start: c.modifiedStartColumn,\n                end: undefined,\n              });\n            }\n          } else if (i === c.modifiedEndLineNumber) {\n            (modLines[i - 1] || (modLines[i - 1] = [])).push({\n              start: undefined,\n              end: c.modifiedEndColumn,\n            });\n          } else {\n            (modLines[i - 1] || (modLines[i - 1] = [])).push({\n              start: undefined,\n              end: undefined,\n            });\n          }\n        }\n      });\n    }\n    const bgStyle =\n      type === "base"\n        ? { background: "rgba(255, 0, 0, 0.2)" }\n        : { background: "rgba(155, 185, 85, 0.2)" };\n    return value.split("\\n").map((s, i) => {\n      const diff =\n        (type === "base" && orgLines[i]) ||\n        (type === "target" && modLines[i]) ||\n        undefined;\n      let node: (React.ReactElement | string)[] = [s];\n      if (diff && diff.length) {\n        let prevEnd = 0;\n        let prevStart = 0;\n        const res: (React.ReactElement | string)[] = [];\n        for (let di = 0; di < diff.length; di++) {\n          const d = diff[di];\n\n          const start = d.start ? d.start - 1 : 0;\n          const end = d.end ? d.end - 1 : s.length;\n          res.push(s.slice(prevEnd, start));\n          res.push(\n            <span key={`${i}-${di}`} style={bgStyle}>\n              {s.slice(start, end)}\n            </span>\n          );\n          prevStart = start;\n          prevEnd = end;\n        }\n        res.push(s.slice(prevEnd));\n\n        node = res;\n      }\n      node.push(" ");\n      return (\n        <div key={i} style={diff && bgStyle}>\n          {node}\n        </div>\n      );\n    });\n  };\n\nexport const Diff: StoryObj = {\n  render: () => {\n    const [baseText, setBaseText] = useState(\n      "This line is removed on the right.\\njust some text\\nabcd\\nefgh\\nSome more text\\nSome more text\\nSome more text"\n    );\n    const [targetText, setTargetText] = useState(\n      "just some text\\nabcz\\nzzzzefgh\\nSome more text.\\nThis line is removed on the left."\n    );\n    const tokens = useMemo(\n      () => diff(baseText.split("\\n"), targetText.split("\\n")),\n      [baseText, targetText]\n    );\n\n    return (\n      <div>\n        <RichTextarea\n          style={style}\n          onChange={(e) => setBaseText(e.target.value)}\n          value={baseText}\n        >\n          {createDiffRenderer(tokens, "base")}\n        </RichTextarea>\n        <RichTextarea\n          style={style}\n          onChange={(e) => setTargetText(e.target.value)}\n          value={targetText}\n        >\n          {createDiffRenderer(tokens, "target")}\n        </RichTextarea>\n      </div>\n    );\n  },\n};\n',locationsMap:{diff:{startLoc:{col:30,line:146},endLoc:{col:1,line:178},startBody:{col:30,line:146},endBody:{col:1,line:178}}}}},component:_src__WEBPACK_IMPORTED_MODULE_2__.p};var style={width:"300px",height:"400px"},createDiffRenderer=function(tokens,type){return function(value){var orgLines=Array.from({length:value.length}),modLines=Array.from({length:value.length}),_iteratorNormalCompletion=!0,_didIteratorError=!1,_iteratorError=void 0;try{for(var _step,_iterator=tokens[Symbol.iterator]();!(_iteratorNormalCompletion=(_step=_iterator.next()).done);_iteratorNormalCompletion=!0)!function(){for(var _token_charChanges,token=_step.value,i=token.originalStartLineNumber;i<=token.originalEndLineNumber;i++)orgLines[i-1]||(orgLines[i-1]=[]),0===token.modifiedEndLineNumber&&orgLines[i-1].push({start:void 0,end:void 0});for(var i1=token.modifiedStartLineNumber;i1<=token.modifiedEndLineNumber;i1++)modLines[i1-1]||(modLines[i1-1]=[]),0===token.originalEndLineNumber&&modLines[i1-1].push({start:void 0,end:void 0});null===(_token_charChanges=token.charChanges)||void 0===_token_charChanges||_token_charChanges.forEach(function(c){for(var i=c.originalStartLineNumber;i<=c.originalEndLineNumber;i++)i===c.originalStartLineNumber?c.originalStartLineNumber===c.originalEndLineNumber?(orgLines[i-1]||(orgLines[i-1]=[])).push({start:c.originalStartColumn,end:c.originalEndColumn}):(orgLines[i-1]||(orgLines[i-1]=[])).push({start:c.originalStartColumn,end:void 0}):i===c.originalEndLineNumber?(orgLines[i-1]||(orgLines[i-1]=[])).push({start:void 0,end:c.originalEndColumn}):(orgLines[i-1]||(orgLines[i-1]=[])).push({start:void 0,end:void 0});for(var i1=c.modifiedStartLineNumber;i1<=c.modifiedEndLineNumber;i1++)i1===c.modifiedStartLineNumber?c.modifiedStartLineNumber===c.modifiedEndLineNumber?(modLines[i1-1]||(modLines[i1-1]=[])).push({start:c.modifiedStartColumn,end:c.modifiedEndColumn}):(modLines[i1-1]||(modLines[i1-1]=[])).push({start:c.modifiedStartColumn,end:void 0}):i1===c.modifiedEndLineNumber?(modLines[i1-1]||(modLines[i1-1]=[])).push({start:void 0,end:c.modifiedEndColumn}):(modLines[i1-1]||(modLines[i1-1]=[])).push({start:void 0,end:void 0})})}()}catch(err){_didIteratorError=!0,_iteratorError=err}finally{try{_iteratorNormalCompletion||null==_iterator.return||_iterator.return()}finally{if(_didIteratorError)throw _iteratorError}}var bgStyle="base"===type?{background:"rgba(255, 0, 0, 0.2)"}:{background:"rgba(155, 185, 85, 0.2)"};return value.split("\n").map(function(s,i){var diff="base"===type&&orgLines[i]||"target"===type&&modLines[i]||void 0,node=[s];if(diff&&diff.length){for(var prevEnd=0,res=[],di=0;di<diff.length;di++){var d=diff[di],start=d.start?d.start-1:0,end=d.end?d.end-1:s.length;res.push(s.slice(prevEnd,start)),res.push((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)("span",{style:bgStyle,children:s.slice(start,end)},"".concat(i,"-").concat(di))),prevEnd=end}res.push(s.slice(prevEnd)),node=res}return node.push(" "),(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)("div",{style:diff&&bgStyle,children:node},i)})}},Diff={render:function(){var _useState=_sliced_to_array((0,react__WEBPACK_IMPORTED_MODULE_1__.useState)("This line is removed on the right.\njust some text\nabcd\nefgh\nSome more text\nSome more text\nSome more text"),2),baseText=_useState[0],setBaseText=_useState[1],_useState1=_sliced_to_array((0,react__WEBPACK_IMPORTED_MODULE_1__.useState)("just some text\nabcz\nzzzzefgh\nSome more text.\nThis line is removed on the left."),2),targetText=_useState1[0],setTargetText=_useState1[1],tokens=(0,react__WEBPACK_IMPORTED_MODULE_1__.useMemo)(function(){return(0,monaco_diff__WEBPACK_IMPORTED_MODULE_3__.Hg)(baseText.split("\n"),targetText.split("\n"))},[baseText,targetText]);return(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)("div",{children:[(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_src__WEBPACK_IMPORTED_MODULE_2__.p,{style:style,onChange:function(e){return setBaseText(e.target.value)},value:baseText,children:createDiffRenderer(tokens,"base")}),(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_src__WEBPACK_IMPORTED_MODULE_2__.p,{style:style,onChange:function(e){return setTargetText(e.target.value)},value:targetText,children:createDiffRenderer(tokens,"target")})]})}};let __namedExportsOrder=["Diff"]}}]);